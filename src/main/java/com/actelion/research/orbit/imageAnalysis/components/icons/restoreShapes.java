package com.actelion.research.orbit.imageAnalysis.components.icons;

import java.awt.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.lang.ref.WeakReference;
import java.util.Base64;
import java.util.Stack;
import javax.imageio.ImageIO;
import javax.swing.SwingUtilities;
import javax.swing.plaf.UIResource;

import org.pushingpixels.neon.api.icon.ResizableIcon;
import org.pushingpixels.neon.api.icon.ResizableIconUIResource;

/**
 * This class has been automatically generated using <a
 * href="https://github.com/kirill-grouchnikov/radiance">Photon SVG transcoder</a>.
 */
public class restoreShapes implements ResizableIcon {
    private Shape shape = null;
    private GeneralPath generalPath = null;
    private Paint paint = null;
    private Stroke stroke = null;
    private Shape clip = null;
    private Stack<AffineTransform> transformsStack = new Stack<>();

    

	private void _paint0(Graphics2D g,float origAlpha) {
transformsStack.push(g.getTransform());
// 
g.setComposite(AlphaComposite.getInstance(3, 1.0f * origAlpha));
transformsStack.push(g.getTransform());
g.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f));
// _0
g.setComposite(AlphaComposite.getInstance(3, 1.0f * origAlpha));
transformsStack.push(g.getTransform());
g.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, -79.62864685058594f, -236.8760986328125f));
// _0_0
g.setComposite(AlphaComposite.getInstance(3, 1.0f * origAlpha));
transformsStack.push(g.getTransform());
g.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f));
// _0_0_0
paint = new Color(230, 230, 230, 255);
stroke = new BasicStroke(2.0f,1,2,4.0f,null,0.0f);
shape = new RoundRectangle2D.Double(85.92674255371094, 241.936767578125, 60.0, 64.0, 2.2460999488830566, 2.224179983139038);
g.setPaint(paint);
g.setStroke(stroke);
g.draw(shape);
g.setTransform(transformsStack.pop());
g.setComposite(AlphaComposite.getInstance(3, 1.0f * origAlpha));
transformsStack.push(g.getTransform());
g.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f));
// _0_0_1
paint = new Color(230, 230, 230, 255);
stroke = new BasicStroke(2.0f,1,2,4.0f,null,0.0f);
shape = new RoundRectangle2D.Double(138.42942810058594, 252.01304626464844, 60.0, 64.0, 2.2460999488830566, 2.224179983139038);
g.setPaint(paint);
g.setStroke(stroke);
g.draw(shape);
g.setTransform(transformsStack.pop());
g.setComposite(AlphaComposite.getInstance(3, 1.0f * origAlpha));
transformsStack.push(g.getTransform());
g.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f));
// _0_0_2
paint = new Color(230, 230, 230, 255);
stroke = new BasicStroke(2.0f,1,2,4.0f,null,0.0f);
shape = new RoundRectangle2D.Double(107.13995361328125, 297.26788330078125, 60.0, 64.0, 2.2460999488830566, 2.224179983139038);
g.setPaint(paint);
g.setStroke(stroke);
g.draw(shape);
g.setTransform(transformsStack.pop());
g.setComposite(AlphaComposite.getInstance(3, 1.0f * origAlpha));
transformsStack.push(g.getTransform());
g.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f));
// _0_0_3
paint = new Color(255, 0, 255, 255);
stroke = new BasicStroke(1.0f,0,0,4.0f,null,0.0f);
if (generalPath == null) {
   generalPath = new GeneralPath();
} else {
   generalPath.reset();
}
generalPath.moveTo(179.62865f, 268.8761f);
generalPath.curveTo(179.05794f, 268.5849f, 178.48721f, 268.29367f, 177.91649f, 268.00247f);
generalPath.curveTo(177.91649f, 267.94354f, 177.9692f, 267.85205f, 177.91649f, 267.82568f);
generalPath.curveTo(177.81108f, 267.77298f, 177.68079f, 267.82568f, 177.56294f, 267.82568f);
generalPath.curveTo(177.50401f, 267.82568f, 177.42783f, 267.86737f, 177.38615f, 267.82568f);
generalPath.curveTo(177.3445f, 267.78403f, 177.42783f, 267.69058f, 177.38615f, 267.64893f);
generalPath.curveTo(177.3445f, 267.60724f, 177.25105f, 267.69058f, 177.2094f, 267.64893f);
generalPath.curveTo(177.16772f, 267.60724f, 177.25105f, 267.51382f, 177.2094f, 267.47214f);
generalPath.curveTo(177.16772f, 267.43048f, 177.09154f, 267.47214f, 177.03261f, 267.47214f);
generalPath.curveTo(176.90965f, 267.47214f, 176.21265f, 267.5041f, 176.14873f, 267.47214f);
generalPath.curveTo(176.07419f, 267.43488f, 176.04648f, 267.33264f, 175.97195f, 267.29535f);
generalPath.curveTo(175.92548f, 267.27213f, 175.35728f, 267.29535f, 175.26485f, 267.29535f);
generalPath.curveTo(174.67558f, 267.29535f, 174.08633f, 267.29535f, 173.49709f, 267.29535f);
generalPath.curveTo(171.96501f, 267.29535f, 170.43295f, 267.29535f, 168.90088f, 267.29535f);
generalPath.curveTo(168.13486f, 267.29535f, 167.36882f, 267.29535f, 166.60278f, 267.29535f);
generalPath.curveTo(166.5599f, 267.29535f, 166.07814f, 267.28967f, 166.07245f, 267.29535f);
generalPath.curveTo(166.03079f, 267.33704f, 166.11412f, 267.43048f, 166.07245f, 267.47214f);
generalPath.curveTo(165.98912f, 267.55548f, 165.8307f, 267.43488f, 165.7189f, 267.47214f);
generalPath.curveTo(165.5939f, 267.51382f, 165.4832f, 267.59f, 165.36536f, 267.64893f);
generalPath.curveTo(165.18857f, 267.64893f, 165.00836f, 267.61426f, 164.83502f, 267.64893f);
generalPath.curveTo(164.70581f, 267.67477f, 164.60646f, 267.78403f, 164.48146f, 267.82568f);
generalPath.curveTo(164.2163f, 267.9141f, 164.30469f, 267.64893f, 163.95113f, 267.82568f);
generalPath.curveTo(163.89844f, 267.85205f, 163.9775f, 267.94977f, 163.95113f, 268.00247f);
generalPath.curveTo(163.91386f, 268.077f, 163.84369f, 268.13303f, 163.77435f, 268.17926f);
generalPath.curveTo(163.55508f, 268.3254f, 163.28651f, 268.38663f, 163.06725f, 268.5328f);
generalPath.curveTo(162.99791f, 268.579f, 162.95981f, 268.66336f, 162.89047f, 268.7096f);
generalPath.curveTo(162.78084f, 268.78265f, 162.6301f, 268.79318f, 162.53693f, 268.88635f);
generalPath.curveTo(162.49525f, 268.928f, 162.57858f, 269.02145f, 162.53693f, 269.06314f);
generalPath.curveTo(162.49525f, 269.1048f, 162.40181f, 269.02145f, 162.36014f, 269.06314f);
generalPath.curveTo(162.31848f, 269.1048f, 162.40181f, 269.19824f, 162.36014f, 269.2399f);
generalPath.curveTo(162.27681f, 269.32324f, 162.08992f, 269.15656f, 162.00659f, 269.2399f);
generalPath.curveTo(161.96492f, 269.28156f, 162.04826f, 269.37503f, 162.00659f, 269.4167f);
generalPath.curveTo(161.96492f, 269.45834f, 161.87148f, 269.37503f, 161.8298f, 269.4167f);
generalPath.curveTo(161.78815f, 269.45834f, 161.85617f, 269.54077f, 161.8298f, 269.59344f);
generalPath.curveTo(161.79256f, 269.668f, 161.71196f, 269.7113f, 161.65305f, 269.77023f);
generalPath.curveTo(161.59412f, 269.82916f, 161.53519f, 269.8881f, 161.47626f, 269.94702f);
generalPath.curveTo(161.24055f, 270.1827f, 160.97739f, 270.39383f, 160.76915f, 270.6541f);
generalPath.curveTo(160.63643f, 270.82f, 160.56583f, 271.0342f, 160.4156f, 271.18445f);
generalPath.curveTo(160.32243f, 271.27762f, 160.17168f, 271.28815f, 160.06206f, 271.36124f);
generalPath.curveTo(159.9927f, 271.40744f, 159.9442f, 271.47906f, 159.88527f, 271.538f);
generalPath.curveTo(159.82634f, 271.59692f, 159.75471f, 271.64545f, 159.7085f, 271.71478f);
generalPath.curveTo(159.6354f, 271.8244f, 159.6048f, 271.9587f, 159.53172f, 272.06833f);
generalPath.curveTo(159.48549f, 272.13766f, 159.40115f, 272.17578f, 159.35493f, 272.24512f);
generalPath.curveTo(159.13568f, 272.574f, 159.04388f, 272.97687f, 158.82462f, 273.30576f);
generalPath.curveTo(158.73216f, 273.44446f, 158.57106f, 273.526f, 158.47105f, 273.65933f);
generalPath.curveTo(158.392f, 273.76474f, 158.35321f, 273.89502f, 158.29428f, 274.01288f);
generalPath.curveTo(158.23535f, 274.13074f, 158.17644f, 274.24857f, 158.1175f, 274.36642f);
generalPath.curveTo(157.99965f, 274.60214f, 157.8818f, 274.83783f, 157.76395f, 275.07355f);
generalPath.curveTo(157.70502f, 275.19138f, 157.62885f, 275.3021f, 157.58717f, 275.4271f);
generalPath.curveTo(157.56854f, 275.483f, 157.61353f, 275.55115f, 157.58717f, 275.60388f);
generalPath.curveTo(157.54991f, 275.6784f, 157.44766f, 275.70612f, 157.4104f, 275.78064f);
generalPath.curveTo(157.38403f, 275.83334f, 157.43675f, 275.90472f, 157.4104f, 275.95743f);
generalPath.curveTo(157.37312f, 276.03195f, 157.25383f, 276.05334f, 157.23363f, 276.1342f);
generalPath.curveTo(157.23363f, 276.31097f, 157.23363f, 276.48776f, 157.23363f, 276.66452f);
generalPath.curveTo(157.17468f, 276.66452f, 157.0832f, 276.61182f, 157.05684f, 276.66452f);
generalPath.curveTo(157.00414f, 276.76993f, 157.05684f, 276.90024f, 157.05684f, 277.01807f);
generalPath.curveTo(157.05684f, 277.077f, 157.09851f, 277.1532f, 157.05684f, 277.19485f);
generalPath.curveTo(156.96367f, 277.28802f, 156.77638f, 277.262f, 156.7033f, 277.37164f);
generalPath.curveTo(156.63792f, 277.4697f, 156.74055f, 277.61337f, 156.7033f, 277.7252f);
generalPath.curveTo(156.67694f, 277.80426f, 156.55286f, 277.8229f, 156.5265f, 277.90198f);
generalPath.curveTo(156.49664f, 277.99155f, 156.5265f, 278.9949f, 156.5265f, 279.1394f);
generalPath.curveTo(156.5265f, 279.19833f, 156.55286f, 279.26346f, 156.5265f, 279.3162f);
generalPath.curveTo(156.48924f, 279.39072f, 156.37608f, 279.4139f, 156.34975f, 279.49295f);
generalPath.curveTo(156.31247f, 279.60477f, 156.34975f, 279.72867f, 156.34975f, 279.8465f);
generalPath.curveTo(156.34975f, 280.259f, 156.34975f, 280.67148f, 156.34975f, 281.08395f);
generalPath.curveTo(156.34975f, 281.55536f, 156.34975f, 282.02676f, 156.34975f, 282.49817f);
generalPath.curveTo(156.34975f, 282.67493f, 156.27068f, 282.8704f, 156.34975f, 283.0285f);
generalPath.curveTo(156.37608f, 283.08118f, 156.48485f, 282.98682f, 156.5265f, 283.0285f);
generalPath.curveTo(156.57883f, 283.08078f, 156.47176f, 283.6261f, 156.5265f, 283.7356f);
generalPath.curveTo(156.56378f, 283.81012f, 156.66602f, 283.83783f, 156.7033f, 283.91238f);
generalPath.curveTo(156.78662f, 284.07904f, 156.79672f, 284.27603f, 156.88007f, 284.4427f);
generalPath.curveTo(156.9546f, 284.59177f, 157.15907f, 284.6472f, 157.23363f, 284.79626f);
generalPath.curveTo(157.25996f, 284.84897f, 157.20093f, 284.924f, 157.23363f, 284.97302f);
generalPath.curveTo(157.32607f, 285.11172f, 157.48048f, 285.19855f, 157.58717f, 285.3266f);
generalPath.curveTo(157.77579f, 285.55292f, 157.90916f, 285.82535f, 158.1175f, 286.0337f);
generalPath.curveTo(158.26773f, 286.18393f, 158.4976f, 286.237f, 158.64783f, 286.38724f);
generalPath.curveTo(158.741f, 286.4804f, 158.73145f, 286.64764f, 158.82462f, 286.7408f);
generalPath.curveTo(158.91779f, 286.83398f, 159.07275f, 286.83853f, 159.17816f, 286.91757f);
generalPath.curveTo(159.3115f, 287.01758f, 159.41386f, 287.1533f, 159.53172f, 287.27112f);
generalPath.curveTo(159.64957f, 287.38898f, 159.76743f, 287.50684f, 159.88527f, 287.6247f);
generalPath.curveTo(159.9442f, 287.68362f, 159.9927f, 287.75525f, 160.06206f, 287.80145f);
generalPath.curveTo(160.17168f, 287.87454f, 160.29774f, 287.9193f, 160.4156f, 287.97824f);
generalPath.curveTo(160.53345f, 288.03717f, 160.64682f, 288.10608f, 160.76915f, 288.155f);
generalPath.curveTo(160.94215f, 288.2242f, 161.1377f, 288.23935f, 161.29948f, 288.3318f);
generalPath.curveTo(161.55528f, 288.47797f, 161.76144f, 288.6987f, 162.00659f, 288.86212f);
generalPath.curveTo(162.12444f, 288.92105f, 162.2423f, 288.97998f, 162.36014f, 289.0389f);
generalPath.curveTo(162.478f, 289.0389f, 162.60829f, 288.98618f, 162.7137f, 289.0389f);
generalPath.curveTo(162.86276f, 289.11343f, 162.92857f, 289.3f, 163.06725f, 289.39246f);
generalPath.curveTo(163.11629f, 289.42514f, 163.18813f, 289.3738f, 163.24403f, 289.39246f);
generalPath.curveTo(163.36903f, 289.4341f, 163.4846f, 289.50143f, 163.59758f, 289.56924f);
generalPath.curveTo(163.77975f, 289.67853f, 163.93788f, 289.82776f, 164.12791f, 289.9228f);
generalPath.curveTo(164.94177f, 290.3297f, 164.36201f, 289.93427f, 165.18857f, 290.09955f);
generalPath.curveTo(165.31776f, 290.1254f, 165.41544f, 290.24014f, 165.54211f, 290.27634f);
generalPath.curveTo(168.07521f, 290.78296f, 164.93745f, 290.07477f, 167.1331f, 290.80667f);
generalPath.curveTo(167.2965f, 290.86115f, 167.8521f, 290.7517f, 168.017f, 290.80667f);
generalPath.curveTo(168.142f, 290.84833f, 168.24554f, 290.94177f, 168.37054f, 290.98343f);
generalPath.curveTo(168.42645f, 291.00208f, 168.4884f, 290.98343f, 168.54733f, 290.98343f);
generalPath.curveTo(168.66518f, 290.98343f, 168.78908f, 290.94617f, 168.90088f, 290.98343f);
generalPath.curveTo(168.97993f, 291.0098f, 168.99594f, 291.14386f, 169.07767f, 291.16022f);
generalPath.curveTo(169.30878f, 291.20645f, 169.54906f, 291.16022f, 169.78476f, 291.16022f);
generalPath.curveTo(170.3151f, 291.16022f, 170.84543f, 291.16022f, 171.37576f, 291.16022f);
generalPath.curveTo(171.55254f, 291.16022f, 171.73274f, 291.12555f, 171.9061f, 291.16022f);
generalPath.curveTo(172.14432f, 291.20786f, 172.37958f, 291.27026f, 172.61319f, 291.33698f);
generalPath.curveTo(172.79236f, 291.38818f, 172.95906f, 291.48743f, 173.14352f, 291.51376f);
generalPath.curveTo(173.37686f, 291.5471f, 173.61493f, 291.51376f, 173.85063f, 291.51376f);
generalPath.curveTo(174.14526f, 291.51376f, 174.43988f, 291.51376f, 174.73451f, 291.51376f);
generalPath.curveTo(175.67732f, 291.51376f, 176.62013f, 291.51376f, 177.56294f, 291.51376f);
generalPath.curveTo(178.50575f, 291.51376f, 179.44856f, 291.51376f, 180.39137f, 291.51376f);
generalPath.curveTo(180.54535f, 291.51376f, 181.38678f, 291.5464f, 181.45203f, 291.51376f);
generalPath.curveTo(181.52657f, 291.4765f, 181.54974f, 291.36334f, 181.6288f, 291.33698f);
generalPath.curveTo(181.70934f, 291.31015f, 182.74652f, 291.33698f, 182.86624f, 291.33698f);
generalPath.curveTo(182.92517f, 291.33698f, 182.98712f, 291.35562f, 183.04301f, 291.33698f);
generalPath.curveTo(183.16801f, 291.29532f, 183.27872f, 291.21915f, 183.39658f, 291.16022f);
generalPath.curveTo(183.51442f, 291.1013f, 183.63715f, 291.05124f, 183.75012f, 290.98343f);
generalPath.curveTo(183.93231f, 290.8741f, 184.09042f, 290.7249f, 184.28046f, 290.62988f);
generalPath.curveTo(184.44711f, 290.54654f, 184.64412f, 290.53644f, 184.81078f, 290.45312f);
generalPath.curveTo(185.31041f, 290.2033f, 185.66199f, 289.7787f, 186.04822f, 289.39246f);
generalPath.curveTo(186.225f, 289.21567f, 186.44994f, 289.07648f, 186.57855f, 288.86212f);
generalPath.curveTo(186.67442f, 288.70233f, 186.672f, 288.49847f, 186.75533f, 288.3318f);
generalPath.curveTo(186.85034f, 288.14175f, 186.98141f, 287.97144f, 187.10889f, 287.80145f);
generalPath.curveTo(187.2926f, 287.5565f, 187.38472f, 287.65973f, 187.46243f, 287.27112f);
generalPath.curveTo(187.4971f, 287.09778f, 187.43336f, 286.91516f, 187.46243f, 286.7408f);
generalPath.curveTo(187.5237f, 286.3732f, 187.7429f, 286.0456f, 187.816f, 285.68015f);
generalPath.curveTo(187.8391f, 285.56458f, 187.816f, 285.44443f, 187.816f, 285.3266f);
generalPath.curveTo(187.816f, 285.09088f, 187.816f, 284.8552f, 187.816f, 284.61948f);
generalPath.curveTo(187.816f, 283.91238f, 187.816f, 283.20526f, 187.816f, 282.49817f);
generalPath.curveTo(187.816f, 281.73212f, 187.816f, 280.9661f, 187.816f, 280.20007f);
generalPath.curveTo(187.816f, 280.06412f, 187.85687f, 279.30292f, 187.816f, 279.1394f);
generalPath.curveTo(187.77078f, 278.95862f, 187.6904f, 278.78824f, 187.6392f, 278.60907f);
generalPath.curveTo(187.57246f, 278.37546f, 187.54774f, 278.12946f, 187.46243f, 277.90198f);
generalPath.curveTo(187.3699f, 277.6552f, 187.21269f, 277.43707f, 187.10889f, 277.19485f);
generalPath.curveTo(186.96208f, 276.8523f, 186.87318f, 276.48776f, 186.75533f, 276.1342f);
generalPath.curveTo(186.6964f, 275.95743f, 186.66188f, 275.77054f, 186.57855f, 275.60388f);
generalPath.curveTo(186.48354f, 275.41385f, 186.3343f, 275.2557f, 186.225f, 275.07355f);
generalPath.curveTo(185.40962f, 273.71457f, 186.9978f, 276.14438f, 185.69467f, 274.18967f);
generalPath.curveTo(185.57681f, 274.01288f, 185.45042f, 273.84152f, 185.34111f, 273.65933f);
generalPath.curveTo(185.27332f, 273.54633f, 185.2575f, 273.39893f, 185.16434f, 273.30576f);
generalPath.curveTo(185.07117f, 273.2126f, 184.90395f, 273.22217f, 184.81078f, 273.129f);
generalPath.curveTo(184.12086f, 272.4391f, 184.8517f, 273.03406f, 184.634f, 272.59866f);
generalPath.curveTo(184.59674f, 272.52414f, 184.50346f, 272.4912f, 184.45723f, 272.42188f);
generalPath.curveTo(184.38414f, 272.31226f, 184.37363f, 272.1615f, 184.28046f, 272.06833f);
generalPath.curveTo(184.13022f, 271.9181f, 183.90036f, 271.86502f, 183.75012f, 271.71478f);
generalPath.curveTo(183.70847f, 271.6731f, 183.77647f, 271.5907f, 183.75012f, 271.538f);
generalPath.curveTo(183.71286f, 271.46347f, 183.61063f, 271.43576f, 183.57335f, 271.36124f);
generalPath.curveTo(183.547f, 271.30853f, 183.615f, 271.22614f, 183.57335f, 271.18445f);
generalPath.curveTo(183.53168f, 271.1428f, 183.43823f, 271.22614f, 183.39658f, 271.18445f);
generalPath.curveTo(183.3549f, 271.1428f, 183.43823f, 271.04935f, 183.39658f, 271.00766f);
generalPath.curveTo(183.3549f, 270.966f, 183.26146f, 271.04935f, 183.21979f, 271.00766f);
generalPath.curveTo(183.17813f, 270.966f, 183.26146f, 270.87256f, 183.21979f, 270.8309f);
generalPath.curveTo(183.17813f, 270.7892f, 183.09572f, 270.85724f, 183.04301f, 270.8309f);
generalPath.curveTo(182.96848f, 270.79364f, 182.93558f, 270.70035f, 182.86624f, 270.6541f);
generalPath.curveTo(182.7566f, 270.58102f, 182.62231f, 270.5504f, 182.5127f, 270.47733f);
generalPath.curveTo(182.37401f, 270.3849f, 182.30821f, 270.19833f, 182.15913f, 270.12378f);
generalPath.curveTo(182.10643f, 270.09744f, 182.03506f, 270.15015f, 181.98236f, 270.12378f);
generalPath.curveTo(181.90782f, 270.08652f, 181.88013f, 269.98428f, 181.80557f, 269.94702f);
generalPath.curveTo(181.75288f, 269.92065f, 181.6815f, 269.97336f, 181.6288f, 269.94702f);
generalPath.curveTo(181.55428f, 269.90976f, 181.52657f, 269.8075f, 181.45203f, 269.77023f);
generalPath.curveTo(181.34662f, 269.71753f, 181.20387f, 269.82294f, 181.09846f, 269.77023f);
generalPath.curveTo(180.36276f, 269.4024f, 181.28745f, 269.78244f, 180.9217f, 269.4167f);
generalPath.curveTo(180.83836f, 269.33334f, 180.56815f, 269.53452f, 180.56815f, 269.4167f);
generalPath.curveTo(180.56815f, 269.35776f, 180.686f, 269.4167f, 180.74492f, 269.4167f);
generalPath.curveTo(180.37283f, 269.23648f, 180.00073f, 269.0563f, 179.62865f, 268.8761f);
shape = generalPath;
g.setPaint(paint);
g.setStroke(stroke);
g.draw(shape);
g.setTransform(transformsStack.pop());
g.setComposite(AlphaComposite.getInstance(3, 1.0f * origAlpha));
transformsStack.push(g.getTransform());
g.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f));
// _0_0_4
paint = new Color(0, 255, 255, 255);
stroke = new BasicStroke(1.0f,0,0,4.0f,null,0.0f);
if (generalPath == null) {
   generalPath = new GeneralPath();
} else {
   generalPath.reset();
}
generalPath.moveTo(131.62865f, 316.8761f);
generalPath.curveTo(131.03018f, 317.08405f, 130.35188f, 317.13605f, 129.83324f, 317.49994f);
generalPath.curveTo(129.68044f, 317.60715f, 129.33385f, 318.84335f, 129.3029f, 319.09094f);
generalPath.curveTo(129.27367f, 319.32483f, 129.36765f, 319.5714f, 129.3029f, 319.79803f);
generalPath.curveTo(129.24454f, 320.00232f, 129.04436f, 320.13834f, 128.94936f, 320.32837f);
generalPath.curveTo(128.86601f, 320.49503f, 128.8559f, 320.69205f, 128.77257f, 320.8587f);
generalPath.curveTo(128.67757f, 321.04874f, 128.4862f, 321.18747f, 128.41902f, 321.38904f);
generalPath.curveTo(128.36311f, 321.55673f, 128.45369f, 321.74603f, 128.41902f, 321.91937f);
generalPath.curveTo(128.35846f, 322.22217f, 127.7668f, 322.87024f, 127.71191f, 322.98f);
generalPath.curveTo(127.60326f, 323.19733f, 127.65312f, 323.47476f, 127.53513f, 323.68713f);
generalPath.curveTo(127.3519f, 324.01697f, 127.05441f, 324.26917f, 126.82803f, 324.571f);
generalPath.curveTo(126.70055f, 324.74097f, 126.59796f, 324.92847f, 126.47447f, 325.10135f);
generalPath.curveTo(126.30323f, 325.3411f, 126.11539f, 325.5687f, 125.94414f, 325.80844f);
generalPath.curveTo(125.82065f, 325.98132f, 125.70844f, 326.162f, 125.59059f, 326.33878f);
generalPath.curveTo(125.47274f, 326.51556f, 125.33205f, 326.67908f, 125.23704f, 326.8691f);
generalPath.curveTo(125.1537f, 327.03577f, 125.14359f, 327.23276f, 125.06026f, 327.39944f);
generalPath.curveTo(124.99824f, 327.52347f, 124.36335f, 328.57993f, 124.17638f, 328.81366f);
generalPath.curveTo(124.07226f, 328.9438f, 123.92694f, 329.03705f, 123.82282f, 329.1672f);
generalPath.curveTo(122.70939f, 330.559f, 124.32549f, 328.71097f, 123.11572f, 330.40463f);
generalPath.curveTo(122.97041f, 330.6081f, 122.72406f, 330.72696f, 122.58539f, 330.93497f);
generalPath.curveTo(122.48202f, 331.09003f, 122.50448f, 331.3055f, 122.40861f, 331.4653f);
generalPath.curveTo(122.32286f, 331.60822f, 122.14751f, 331.68018f, 122.05506f, 331.81885f);
generalPath.curveTo(121.31936f, 332.92242f, 121.99613f, 332.1135f, 121.52473f, 333.0563f);
generalPath.curveTo(121.38953f, 333.3267f, 120.97053f, 333.91144f, 120.81762f, 334.29373f);
generalPath.curveTo(120.74842f, 334.46674f, 120.72418f, 334.65738f, 120.64084f, 334.82407f);
generalPath.curveTo(120.60358f, 334.8986f, 120.49042f, 334.92178f, 120.46407f, 335.00085f);
generalPath.curveTo(120.4268f, 335.11264f, 120.51677f, 335.249f, 120.46407f, 335.3544f);
generalPath.curveTo(120.43771f, 335.4071f, 120.31364f, 335.3017f, 120.28729f, 335.3544f);
generalPath.curveTo(120.23459f, 335.4598f, 120.31587f, 335.5936f, 120.28729f, 335.70795f);
generalPath.curveTo(120.15912f, 336.22064f, 120.14937f, 335.91483f, 119.93374f, 336.23828f);
generalPath.curveTo(119.86065f, 336.3479f, 119.80886f, 336.47073f, 119.75696f, 336.59183f);
generalPath.curveTo(119.63911f, 336.88647f, 119.52126f, 337.1811f, 119.40341f, 337.4757f);
generalPath.curveTo(119.34448f, 337.53464f, 119.2639f, 337.57794f, 119.22663f, 337.6525f);
generalPath.curveTo(119.08472f, 337.9363f, 119.03051f, 338.26086f, 118.87308f, 338.53638f);
generalPath.curveTo(118.7077f, 338.82578f, 118.33747f, 338.95764f, 118.16597f, 339.24347f);
generalPath.curveTo(118.0701f, 339.40326f, 118.07253f, 339.60715f, 117.98919f, 339.7738f);
generalPath.curveTo(117.83108f, 340.09003f, 117.26546f, 340.77103f, 117.10531f, 341.01126f);
generalPath.curveTo(116.83008f, 341.4241f, 116.67343f, 342.01263f, 116.3982f, 342.42545f);
generalPath.curveTo(116.23477f, 342.6706f, 116.01405f, 342.87677f, 115.86787f, 343.13257f);
generalPath.curveTo(115.68297f, 343.45615f, 115.70606f, 343.87366f, 115.51432f, 344.19324f);
generalPath.curveTo(115.34282f, 344.47906f, 115.00721f, 344.63367f, 114.80721f, 344.90033f);
generalPath.curveTo(114.72816f, 345.00574f, 114.6721f, 345.12888f, 114.63044f, 345.25388f);
generalPath.curveTo(114.59317f, 345.3657f, 114.71377f, 345.5241f, 114.63044f, 345.60745f);
generalPath.curveTo(114.58877f, 345.6491f, 114.49533f, 345.56577f, 114.45366f, 345.60745f);
generalPath.curveTo(114.41199f, 345.6491f, 114.48001f, 345.7315f, 114.45366f, 345.7842f);
generalPath.curveTo(114.41639f, 345.85876f, 114.31415f, 345.88647f, 114.27688f, 345.961f);
generalPath.curveTo(114.20617f, 346.10242f, 114.34759f, 346.3499f, 114.27688f, 346.49133f);
generalPath.curveTo(114.23961f, 346.56586f, 114.12646f, 346.58905f, 114.10011f, 346.6681f);
generalPath.curveTo(114.06284f, 346.7799f, 114.15281f, 346.91623f, 114.10011f, 347.02164f);
generalPath.curveTo(114.07375f, 347.07437f, 113.92333f, 347.08057f, 113.92333f, 347.02164f);
generalPath.curveTo(113.92333f, 346.96274f, 114.10011f, 346.96274f, 114.10011f, 347.02164f);
generalPath.curveTo(114.10011f, 347.10498f, 113.9606f, 347.1239f, 113.92333f, 347.19843f);
generalPath.curveTo(113.9052f, 347.23468f, 113.8984f, 347.70383f, 113.92333f, 347.72876f);
generalPath.curveTo(113.965f, 347.77042f, 114.0474f, 347.70242f, 114.10011f, 347.72876f);
generalPath.curveTo(114.17464f, 347.76602f, 114.20754f, 347.8593f, 114.27688f, 347.90555f);
generalPath.curveTo(114.38652f, 347.97864f, 114.51259f, 348.02338f, 114.63044f, 348.0823f);
generalPath.curveTo(114.74829f, 348.14124f, 114.85899f, 348.2174f, 114.98399f, 348.2591f);
generalPath.curveTo(115.03989f, 348.2777f, 115.10486f, 348.24045f, 115.16077f, 348.2591f);
generalPath.curveTo(115.28577f, 348.30075f, 115.39198f, 348.38693f, 115.51432f, 348.43588f);
generalPath.curveTo(115.68733f, 348.50507f, 115.87164f, 348.54343f, 116.04465f, 348.61264f);
generalPath.curveTo(116.28932f, 348.7105f, 116.4961f, 348.90228f, 116.75176f, 348.9662f);
generalPath.curveTo(116.88619f, 348.99982f, 117.48761f, 348.9662f, 117.63564f, 348.9662f);
generalPath.curveTo(117.69456f, 348.9662f, 117.75349f, 348.9662f, 117.81242f, 348.9662f);
generalPath.curveTo(117.87134f, 348.9662f, 117.93649f, 348.93985f, 117.98919f, 348.9662f);
generalPath.curveTo(118.06373f, 349.00348f, 118.0886f, 349.11203f, 118.16597f, 349.14297f);
generalPath.curveTo(118.8407f, 349.41287f, 119.5792f, 349.31976f, 120.28729f, 349.31976f);
generalPath.curveTo(120.52299f, 349.31976f, 120.76106f, 349.2864f, 120.9944f, 349.31976f);
generalPath.curveTo(121.17886f, 349.3461f, 121.34795f, 349.4376f, 121.52473f, 349.49652f);
generalPath.curveTo(121.81936f, 349.55545f, 122.10964f, 349.6434f, 122.40861f, 349.6733f);
generalPath.curveTo(122.85376f, 349.71783f, 123.36358f, 349.6733f, 123.82282f, 349.6733f);
generalPath.curveTo(123.94068f, 349.6733f, 124.06013f, 349.65393f, 124.17638f, 349.6733f);
generalPath.curveTo(124.41603f, 349.71326f, 124.64383f, 349.81015f, 124.88348f, 349.85007f);
generalPath.curveTo(124.99973f, 349.86945f, 125.1227f, 349.8215f, 125.23704f, 349.85007f);
generalPath.curveTo(125.36486f, 349.88205f, 125.46559f, 349.9852f, 125.59059f, 350.02686f);
generalPath.curveTo(126.05157f, 350.1805f, 126.53759f, 350.24692f, 127.0048f, 350.3804f);
generalPath.curveTo(128.08751f, 350.68976f, 127.11601f, 350.567f, 128.94936f, 350.91074f);
generalPath.curveTo(130.66676f, 351.23276f, 129.89452f, 350.92606f, 131.24744f, 351.26428f);
generalPath.curveTo(131.8345f, 351.41107f, 131.82356f, 351.5352f, 132.48488f, 351.61786f);
generalPath.curveTo(132.71877f, 351.6471f, 132.95628f, 351.61786f, 133.19199f, 351.61786f);
generalPath.curveTo(133.25092f, 351.61786f, 133.31287f, 351.5992f, 133.36877f, 351.61786f);
generalPath.curveTo(133.49377f, 351.65952f, 133.59563f, 351.75842f, 133.72232f, 351.79462f);
generalPath.curveTo(136.50922f, 352.352f, 133.55959f, 351.68146f, 134.95976f, 352.1482f);
generalPath.curveTo(135.07156f, 352.18546f, 135.2015f, 352.1109f, 135.31331f, 352.1482f);
generalPath.curveTo(135.56331f, 352.2315f, 135.76476f, 352.4378f, 136.02042f, 352.50174f);
generalPath.curveTo(136.36813f, 352.58865f, 136.72752f, 352.61957f, 137.08109f, 352.6785f);
generalPath.curveTo(138.43811f, 352.9047f, 137.79027f, 352.785f, 139.02562f, 353.03207f);
generalPath.curveTo(139.32025f, 353.091f, 139.6206f, 353.12628f, 139.9095f, 353.20883f);
generalPath.curveTo(140.0362f, 353.24503f, 140.13635f, 353.34943f, 140.26306f, 353.38562f);
generalPath.curveTo(141.1844f, 353.64886f, 142.16174f, 353.6835f, 143.09148f, 353.91595f);
generalPath.curveTo(143.50766f, 354.02f, 143.91505f, 354.15662f, 144.32892f, 354.2695f);
generalPath.curveTo(144.56332f, 354.33344f, 144.79552f, 354.41193f, 145.03603f, 354.44626f);
generalPath.curveTo(145.38603f, 354.49628f, 145.74794f, 354.38815f, 146.0967f, 354.44626f);
generalPath.curveTo(146.28049f, 354.4769f, 146.44785f, 354.57187f, 146.62701f, 354.62305f);
generalPath.curveTo(146.86063f, 354.6898f, 147.0951f, 354.75638f, 147.33412f, 354.79984f);
generalPath.curveTo(147.74406f, 354.87436f, 148.15633f, 354.942f, 148.57156f, 354.9766f);
generalPath.curveTo(148.98262f, 355.01086f, 149.39651f, 354.9766f, 149.809f, 354.9766f);
generalPath.curveTo(150.16255f, 354.9766f, 150.5161f, 354.9766f, 150.86966f, 354.9766f);
generalPath.curveTo(151.04643f, 354.9766f, 151.2232f, 354.9766f, 151.4f, 354.9766f);
generalPath.curveTo(151.45891f, 354.9766f, 151.52406f, 354.95026f, 151.57677f, 354.9766f);
generalPath.curveTo(152.27841f, 355.32742f, 150.79547f, 355.03247f, 152.28387f, 355.33017f);
generalPath.curveTo(152.39943f, 355.35327f, 152.51958f, 355.33017f, 152.63744f, 355.33017f);
generalPath.curveTo(152.69635f, 355.33017f, 152.7615f, 355.3038f, 152.8142f, 355.33017f);
generalPath.curveTo(152.88873f, 355.36743f, 152.91644f, 355.46967f, 152.99098f, 355.50693f);
generalPath.curveTo(153.0306f, 355.52676f, 153.65608f, 355.50693f, 153.69809f, 355.50693f);
generalPath.curveTo(154.11057f, 355.50693f, 154.52304f, 355.50693f, 154.93552f, 355.50693f);
generalPath.curveTo(155.23015f, 355.50693f, 155.52478f, 355.50693f, 155.81941f, 355.50693f);
generalPath.curveTo(155.87833f, 355.50693f, 155.95451f, 355.5486f, 155.99619f, 355.50693f);
generalPath.curveTo(156.03786f, 355.46527f, 155.96983f, 355.38287f, 155.99619f, 355.33017f);
generalPath.curveTo(156.03345f, 355.2556f, 156.1466f, 355.23245f, 156.17296f, 355.15338f);
generalPath.curveTo(156.2475f, 354.92978f, 156.06755f, 354.6571f, 156.17296f, 354.44626f);
generalPath.curveTo(156.19931f, 354.3936f, 156.30807f, 354.48795f, 156.34975f, 354.44626f);
generalPath.curveTo(156.38588f, 354.41013f, 156.3147f, 353.98605f, 156.34975f, 353.91595f);
generalPath.curveTo(156.387f, 353.8414f, 156.46759f, 353.7981f, 156.5265f, 353.73917f);
generalPath.curveTo(156.5265f, 353.6213f, 156.48924f, 353.4974f, 156.5265f, 353.38562f);
generalPath.curveTo(156.55286f, 353.30655f, 156.67694f, 353.2879f, 156.7033f, 353.20883f);
generalPath.curveTo(156.74055f, 353.09702f, 156.7033f, 352.97314f, 156.7033f, 352.8553f);
generalPath.curveTo(156.7033f, 352.79636f, 156.67694f, 352.7312f, 156.7033f, 352.6785f);
generalPath.curveTo(156.74055f, 352.60397f, 156.85371f, 352.58078f, 156.88007f, 352.50174f);
generalPath.curveTo(156.93452f, 352.33835f, 156.8251f, 351.78275f, 156.88007f, 351.61786f);
generalPath.curveTo(156.92172f, 351.49286f, 157.01518f, 351.38928f, 157.05684f, 351.26428f);
generalPath.curveTo(157.07549f, 351.2084f, 157.03821f, 351.14343f, 157.05684f, 351.08752f);
generalPath.curveTo(157.09851f, 350.96252f, 157.20166f, 350.8618f, 157.23363f, 350.73395f);
generalPath.curveTo(157.2622f, 350.61963f, 157.23363f, 350.49826f, 157.23363f, 350.3804f);
generalPath.curveTo(157.23363f, 350.1447f, 157.23363f, 349.909f, 157.23363f, 349.6733f);
generalPath.curveTo(157.23363f, 349.61438f, 157.215f, 349.55243f, 157.23363f, 349.49652f);
generalPath.curveTo(157.27528f, 349.37152f, 157.36873f, 349.26797f, 157.4104f, 349.14297f);
generalPath.curveTo(157.42903f, 349.08707f, 157.39175f, 349.0221f, 157.4104f, 348.9662f);
generalPath.curveTo(157.45206f, 348.8412f, 157.56854f, 348.74307f, 157.58717f, 348.61264f);
generalPath.curveTo(157.64658f, 348.1968f, 157.58717f, 347.64694f, 157.58717f, 347.19843f);
generalPath.curveTo(157.58717f, 347.08057f, 157.5586f, 346.9592f, 157.58717f, 346.84488f);
generalPath.curveTo(157.91106f, 345.54932f, 157.70906f, 348.1558f, 157.94073f, 345.60745f);
generalPath.curveTo(157.97273f, 345.25534f, 157.94073f, 344.90033f, 157.94073f, 344.54678f);
generalPath.curveTo(157.94073f, 344.07538f, 157.94073f, 343.60397f, 157.94073f, 343.13257f);
generalPath.curveTo(157.94073f, 343.0338f, 157.90594f, 342.353f, 157.94073f, 342.2487f);
generalPath.curveTo(157.98239f, 342.1237f, 158.09166f, 342.02432f, 158.1175f, 341.89514f);
generalPath.curveTo(158.15218f, 341.7218f, 158.1175f, 341.54156f, 158.1175f, 341.3648f);
generalPath.curveTo(158.1175f, 341.07016f, 158.1175f, 340.77554f, 158.1175f, 340.48093f);
generalPath.curveTo(158.1175f, 340.36307f, 158.08891f, 340.2417f, 158.1175f, 340.12735f);
generalPath.curveTo(158.14946f, 339.99954f, 158.25809f, 339.9005f, 158.29428f, 339.7738f);
generalPath.curveTo(158.42068f, 339.33142f, 158.56561f, 338.24036f, 158.64783f, 337.82928f);
generalPath.curveTo(158.69548f, 337.59103f, 158.75786f, 337.35577f, 158.82462f, 337.12216f);
generalPath.curveTo(158.8758f, 336.943f, 158.96484f, 336.77454f, 159.00139f, 336.59183f);
generalPath.curveTo(159.02727f, 336.4625f, 158.9552f, 335.60043f, 159.00139f, 335.53116f);
generalPath.curveTo(159.09384f, 335.3925f, 159.2804f, 335.3267f, 159.35493f, 335.1776f);
generalPath.curveTo(159.4636f, 334.9603f, 159.46497f, 334.70413f, 159.53172f, 334.47052f);
generalPath.curveTo(159.58292f, 334.29135f, 159.67195f, 334.1229f, 159.7085f, 333.9402f);
generalPath.curveTo(159.74213f, 333.772f, 159.66501f, 332.9665f, 159.7085f, 332.87952f);
generalPath.curveTo(159.74576f, 332.805f, 159.85892f, 332.7818f, 159.88527f, 332.70273f);
generalPath.curveTo(159.92255f, 332.59094f, 159.85669f, 332.46353f, 159.88527f, 332.34918f);
generalPath.curveTo(160.11475f, 331.43127f, 160.06206f, 332.5379f, 160.06206f, 331.6421f);
generalPath.curveTo(160.06206f, 331.176f, 160.04776f, 331.71353f, 160.23882f, 330.7582f);
generalPath.curveTo(160.25038f, 330.7004f, 160.21246f, 330.63412f, 160.23882f, 330.58142f);
generalPath.curveTo(160.2761f, 330.50687f, 160.37833f, 330.4792f, 160.4156f, 330.40463f);
generalPath.curveTo(160.46822f, 330.2994f, 160.366f, 329.6696f, 160.4156f, 329.52075f);
generalPath.curveTo(160.45728f, 329.39575f, 160.56042f, 329.29504f, 160.59238f, 329.1672f);
generalPath.curveTo(160.62096f, 329.0529f, 160.55511f, 328.92545f, 160.59238f, 328.81366f);
generalPath.curveTo(160.61873f, 328.7346f, 160.74895f, 328.7177f, 160.76915f, 328.63687f);
generalPath.curveTo(160.81447f, 328.45563f, 160.70721f, 327.76205f, 160.76915f, 327.57623f);
generalPath.curveTo(160.79552f, 327.49716f, 160.90866f, 327.47397f, 160.94592f, 327.39944f);
generalPath.curveTo(160.96878f, 327.35373f, 160.94592f, 326.46408f, 160.94592f, 326.33878f);
generalPath.curveTo(160.94592f, 326.27985f, 160.9876f, 326.20367f, 160.94592f, 326.162f);
generalPath.curveTo(160.85275f, 326.06882f, 160.70201f, 326.05832f, 160.59238f, 325.98523f);
generalPath.curveTo(160.52304f, 325.939f, 160.49014f, 325.84573f, 160.4156f, 325.80844f);
generalPath.curveTo(160.3629f, 325.7821f, 160.29153f, 325.8348f, 160.23882f, 325.80844f);
generalPath.curveTo(160.16429f, 325.77118f, 160.13658f, 325.66895f, 160.06206f, 325.63168f);
generalPath.curveTo(159.89539f, 325.54834f, 159.70473f, 325.5241f, 159.53172f, 325.4549f);
generalPath.curveTo(159.40938f, 325.40594f, 159.30598f, 325.3101f, 159.17816f, 325.2781f);
generalPath.curveTo(159.06383f, 325.24954f, 158.93642f, 325.3154f, 158.82462f, 325.2781f);
generalPath.curveTo(158.74554f, 325.25177f, 158.72237f, 325.1386f, 158.64783f, 325.10135f);
generalPath.curveTo(158.48117f, 325.018f, 158.29051f, 324.99377f, 158.1175f, 324.92456f);
generalPath.curveTo(157.87283f, 324.8267f, 157.6604f, 324.65436f, 157.4104f, 324.571f);
generalPath.curveTo(157.17992f, 324.49417f, 156.939f, 324.45316f, 156.7033f, 324.39423f);
generalPath.curveTo(156.11562f, 324.2473f, 155.48888f, 324.10983f, 154.93552f, 323.86392f);
generalPath.curveTo(154.74136f, 323.77762f, 154.60246f, 323.58926f, 154.4052f, 323.51035f);
generalPath.curveTo(154.18636f, 323.42282f, 153.9089f, 323.61575f, 153.69809f, 323.51035f);
generalPath.curveTo(153.35733f, 323.1696f, 153.40984f, 323.14755f, 152.99098f, 322.98f);
generalPath.curveTo(152.81796f, 322.91083f, 152.63982f, 322.85443f, 152.46065f, 322.80325f);
generalPath.curveTo(152.22704f, 322.7365f, 151.97086f, 322.7351f, 151.75354f, 322.62646f);
generalPath.curveTo(151.49002f, 322.49472f, 151.31567f, 322.2158f, 151.04643f, 322.09613f);
generalPath.curveTo(150.77187f, 321.97412f, 150.44974f, 322.00772f, 150.16255f, 321.91937f);
generalPath.curveTo(149.68135f, 321.7713f, 149.2215f, 321.5611f, 148.74834f, 321.38904f);
generalPath.curveTo(148.57323f, 321.32535f, 148.38467f, 321.2956f, 148.21802f, 321.21225f);
generalPath.curveTo(147.7689f, 320.9877f, 148.39905f, 321.00098f, 147.68768f, 320.8587f);
generalPath.curveTo(147.46571f, 320.72003f, 147.2117f, 320.90494f, 146.98058f, 320.8587f);
generalPath.curveTo(146.74232f, 320.81104f, 146.5117f, 320.72958f, 146.27345f, 320.68192f);
generalPath.curveTo(144.66429f, 320.36008f, 145.58186f, 320.6674f, 143.62181f, 320.1516f);
generalPath.curveTo(143.02687f, 319.99503f, 142.45088f, 319.77048f, 141.85405f, 319.62128f);
generalPath.curveTo(141.50632f, 319.53433f, 141.14487f, 319.51477f, 140.7934f, 319.4445f);
generalPath.curveTo(140.55515f, 319.39685f, 140.32452f, 319.31537f, 140.08627f, 319.2677f);
generalPath.curveTo(140.0285f, 319.25616f, 139.95117f, 319.3094f, 139.9095f, 319.2677f);
generalPath.curveTo(139.86784f, 319.22604f, 139.95117f, 319.1326f, 139.9095f, 319.09094f);
generalPath.curveTo(139.90382f, 319.08524f, 139.42204f, 319.09094f, 139.37917f, 319.09094f);
generalPath.curveTo(139.29956f, 319.09094f, 138.90263f, 319.11783f, 138.84885f, 319.09094f);
generalPath.curveTo(138.7743f, 319.05368f, 138.7466f, 318.95142f, 138.67207f, 318.91415f);
generalPath.curveTo(138.56813f, 318.86218f, 138.11008f, 318.95044f, 137.96497f, 318.91415f);
generalPath.curveTo(137.78418f, 318.86896f, 137.61842f, 318.768f, 137.43463f, 318.73737f);
generalPath.curveTo(137.26025f, 318.7083f, 137.0758f, 318.78027f, 136.9043f, 318.73737f);
generalPath.curveTo(136.82346f, 318.71716f, 136.80658f, 318.58698f, 136.72752f, 318.5606f);
generalPath.curveTo(136.6224f, 318.52557f, 135.87567f, 318.5606f, 135.66685f, 318.5606f);
generalPath.curveTo(135.60794f, 318.5606f, 135.54901f, 318.5606f, 135.4901f, 318.5606f);
generalPath.curveTo(135.43117f, 318.5606f, 135.35498f, 318.60226f, 135.31331f, 318.5606f);
generalPath.curveTo(135.27164f, 318.51895f, 135.35498f, 318.42548f, 135.31331f, 318.38382f);
generalPath.curveTo(135.29147f, 318.362f, 134.71706f, 318.38382f, 134.6062f, 318.38382f);
generalPath.curveTo(134.3705f, 318.38382f, 134.1348f, 318.38382f, 133.8991f, 318.38382f);
generalPath.curveTo(133.84016f, 318.38382f, 133.76399f, 318.42548f, 133.72232f, 318.38382f);
generalPath.curveTo(133.68065f, 318.34216f, 133.76399f, 318.24872f, 133.72232f, 318.20706f);
generalPath.curveTo(133.68065f, 318.16537f, 133.60025f, 318.22894f, 133.54555f, 318.20706f);
generalPath.curveTo(133.30087f, 318.1092f, 133.08517f, 317.94604f, 132.83844f, 317.8535f);
generalPath.curveTo(132.61095f, 317.7682f, 132.36703f, 317.73566f, 132.13133f, 317.67673f);
generalPath.curveTo(131.89563f, 317.6178f, 131.66246f, 317.54758f, 131.42422f, 317.49994f);
generalPath.curveTo(131.36644f, 317.4884f, 131.28911f, 317.5416f, 131.24744f, 317.49994f);
generalPath.curveTo(131.15428f, 317.40677f, 131.16383f, 317.23956f, 131.07066f, 317.1464f);
generalPath.curveTo(131.029f, 317.10474f, 130.93556f, 317.18805f, 130.89389f, 317.1464f);
generalPath.curveTo(130.85222f, 317.10474f, 130.93556f, 317.0113f, 130.89389f, 316.9696f);
generalPath.curveTo(130.85222f, 316.92795f, 130.65866f, 316.97705f, 130.71712f, 316.9696f);
generalPath.curveTo(131.02011f, 316.93106f, 131.3248f, 316.90726f, 131.62865f, 316.8761f);
shape = generalPath;
g.setPaint(paint);
g.setStroke(stroke);
g.draw(shape);
g.setTransform(transformsStack.pop());
g.setComposite(AlphaComposite.getInstance(3, 1.0f * origAlpha));
transformsStack.push(g.getTransform());
g.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f));
// _0_0_5
paint = new Color(102, 255, 0, 255);
stroke = new BasicStroke(1.0f,0,0,4.0f,null,0.0f);
if (generalPath == null) {
   generalPath = new GeneralPath();
} else {
   generalPath.reset();
}
generalPath.moveTo(119.62865f, 252.8761f);
generalPath.curveTo(119.73035f, 252.7917f, 119.89595f, 252.74954f, 119.93374f, 252.6229f);
generalPath.curveTo(119.94668f, 252.57953f, 119.66361f, 252.39449f, 119.58018f, 252.26933f);
generalPath.curveTo(119.52126f, 252.15149f, 119.46233f, 252.03365f, 119.40341f, 251.91579f);
generalPath.curveTo(119.34448f, 251.91579f, 119.2683f, 251.95746f, 119.22663f, 251.91579f);
generalPath.curveTo(119.18496f, 251.87411f, 119.2683f, 251.78069f, 119.22663f, 251.73901f);
generalPath.curveTo(119.18496f, 251.69736f, 119.09152f, 251.78069f, 119.04985f, 251.73901f);
generalPath.curveTo(119.00819f, 251.69736f, 119.09152f, 251.6039f, 119.04985f, 251.56224f);
generalPath.curveTo(119.00819f, 251.52057f, 118.92898f, 251.58087f, 118.87308f, 251.56224f);
generalPath.curveTo(118.5033f, 251.43898f, 118.17459f, 251.17677f, 117.81242f, 251.0319f);
generalPath.curveTo(117.6394f, 250.9627f, 117.45886f, 250.91406f, 117.28209f, 250.85513f);
generalPath.curveTo(117.10531f, 250.7962f, 116.93448f, 250.7149f, 116.75176f, 250.67834f);
generalPath.curveTo(116.63619f, 250.65524f, 116.50361f, 250.73106f, 116.3982f, 250.67834f);
generalPath.curveTo(116.3455f, 250.652f, 116.43987f, 250.54324f, 116.3982f, 250.50159f);
generalPath.curveTo(116.35654f, 250.45992f, 116.28035f, 250.50159f, 116.22143f, 250.50159f);
generalPath.curveTo(116.10357f, 250.50159f, 115.98572f, 250.50159f, 115.86787f, 250.50159f);
generalPath.curveTo(115.39647f, 250.50159f, 114.92506f, 250.50159f, 114.45366f, 250.50159f);
generalPath.curveTo(114.21796f, 250.50159f, 113.98225f, 250.50159f, 113.74655f, 250.50159f);
generalPath.curveTo(113.6287f, 250.50159f, 113.50925f, 250.52095f, 113.393f, 250.50159f);
generalPath.curveTo(113.15335f, 250.46162f, 112.92697f, 250.35493f, 112.68589f, 250.3248f);
generalPath.curveTo(112.45201f, 250.29556f, 112.21449f, 250.3248f, 111.97879f, 250.3248f);
generalPath.curveTo(111.62523f, 250.3248f, 111.26812f, 250.3748f, 110.91812f, 250.3248f);
generalPath.curveTo(110.73366f, 250.29845f, 110.57052f, 250.18457f, 110.38779f, 250.14803f);
generalPath.curveTo(110.15667f, 250.1018f, 109.91639f, 250.14803f, 109.68069f, 250.14803f);
generalPath.curveTo(109.20928f, 250.14803f, 108.73788f, 250.14803f, 108.26647f, 250.14803f);
generalPath.curveTo(108.0897f, 250.14803f, 107.91292f, 250.14803f, 107.73614f, 250.14803f);
generalPath.curveTo(107.67722f, 250.14803f, 107.60103f, 250.10635f, 107.55937f, 250.14803f);
generalPath.curveTo(107.5177f, 250.1897f, 107.60103f, 250.28313f, 107.55937f, 250.3248f);
generalPath.curveTo(107.5177f, 250.36647f, 107.4353f, 250.29845f, 107.38259f, 250.3248f);
generalPath.curveTo(107.30806f, 250.36208f, 107.28035f, 250.46431f, 107.20582f, 250.50159f);
generalPath.curveTo(106.63086f, 250.78906f, 106.78532f, 250.5462f, 106.32193f, 250.85513f);
generalPath.curveTo(106.25259f, 250.90137f, 106.21969f, 250.99464f, 106.14515f, 251.0319f);
generalPath.curveTo(106.09245f, 251.05826f, 106.01004f, 250.99023f, 105.96838f, 251.0319f);
generalPath.curveTo(105.92671f, 251.07356f, 106.01004f, 251.16702f, 105.96838f, 251.20868f);
generalPath.curveTo(105.88504f, 251.29202f, 105.72023f, 251.15598f, 105.61482f, 251.20868f);
generalPath.curveTo(105.54029f, 251.24596f, 105.51258f, 251.34819f, 105.43805f, 251.38547f);
generalPath.curveTo(105.38534f, 251.4118f, 105.30294f, 251.3438f, 105.26127f, 251.38547f);
generalPath.curveTo(105.2196f, 251.42712f, 105.30294f, 251.52057f, 105.26127f, 251.56224f);
generalPath.curveTo(104.57136f, 252.25215f, 105.16633f, 251.52132f, 104.73094f, 251.73901f);
generalPath.curveTo(104.58187f, 251.81355f, 104.51606f, 252.00012f, 104.37739f, 252.09258f);
generalPath.curveTo(104.26775f, 252.16566f, 104.13347f, 252.19626f, 104.02383f, 252.26933f);
generalPath.curveTo(103.9545f, 252.31557f, 103.91639f, 252.3999f, 103.84706f, 252.44612f);
generalPath.curveTo(103.73743f, 252.51921f, 103.59891f, 252.54384f, 103.4935f, 252.6229f);
generalPath.curveTo(103.43747f, 252.66492f, 102.6833f, 253.39627f, 102.60962f, 253.50677f);
generalPath.curveTo(102.40233f, 253.8177f, 102.39981f, 254.03133f, 102.25607f, 254.39066f);
generalPath.curveTo(102.20713f, 254.513f, 102.11125f, 254.6164f, 102.07929f, 254.74422f);
generalPath.curveTo(102.02065f, 254.97878f, 102.14866f, 255.59676f, 102.07929f, 255.80489f);
generalPath.curveTo(102.05294f, 255.88393f, 101.92887f, 255.9026f, 101.90251f, 255.98166f);
generalPath.curveTo(101.86525f, 256.09344f, 101.90251f, 256.21735f, 101.90251f, 256.3352f);
generalPath.curveTo(101.90251f, 256.74768f, 101.90251f, 257.16016f, 101.90251f, 257.57266f);
generalPath.curveTo(101.90251f, 258.1619f, 101.90251f, 258.75116f, 101.90251f, 259.34042f);
generalPath.curveTo(101.90251f, 259.39935f, 101.90251f, 259.45825f, 101.90251f, 259.51718f);
generalPath.curveTo(101.90251f, 259.5761f, 101.86085f, 259.6523f, 101.90251f, 259.69397f);
generalPath.curveTo(101.94418f, 259.73563f, 102.05294f, 259.64127f, 102.07929f, 259.69397f);
generalPath.curveTo(102.13199f, 259.79938f, 102.04202f, 259.93573f, 102.07929f, 260.04752f);
generalPath.curveTo(102.10564f, 260.1266f, 102.2188f, 260.14975f, 102.25607f, 260.2243f);
generalPath.curveTo(102.28242f, 260.277f, 102.23743f, 260.34518f, 102.25607f, 260.40106f);
generalPath.curveTo(102.29773f, 260.52606f, 102.39118f, 260.62964f, 102.43284f, 260.75464f);
generalPath.curveTo(102.47011f, 260.86642f, 102.38014f, 261.00278f, 102.43284f, 261.1082f);
generalPath.curveTo(102.47011f, 261.1827f, 102.55069f, 261.22604f, 102.60962f, 261.28497f);
generalPath.curveTo(102.66855f, 261.4028f, 102.73746f, 261.51617f, 102.7864f, 261.63852f);
generalPath.curveTo(102.93014f, 261.99786f, 102.93266f, 262.21146f, 103.13995f, 262.5224f);
generalPath.curveTo(103.18618f, 262.59174f, 103.27946f, 262.62463f, 103.31673f, 262.69916f);
generalPath.curveTo(103.34308f, 262.75186f, 103.29037f, 262.82324f, 103.31673f, 262.87595f);
generalPath.curveTo(103.39126f, 263.02502f, 103.57783f, 263.09082f, 103.67028f, 263.2295f);
generalPath.curveTo(103.74337f, 263.33914f, 103.77397f, 263.47342f, 103.84706f, 263.58304f);
generalPath.curveTo(103.89328f, 263.6524f, 103.96491f, 263.7009f, 104.02383f, 263.75983f);
generalPath.curveTo(104.08276f, 263.8777f, 104.12752f, 264.00375f, 104.20061f, 264.11337f);
generalPath.curveTo(104.24684f, 264.1827f, 104.33116f, 264.22083f, 104.37739f, 264.29016f);
generalPath.curveTo(104.45048f, 264.39978f, 104.48108f, 264.5341f, 104.55416f, 264.6437f);
generalPath.curveTo(104.72758f, 264.90384f, 105.08786f, 265.0907f, 105.26127f, 265.35083f);
generalPath.curveTo(105.33436f, 265.46045f, 105.34488f, 265.6112f, 105.43805f, 265.70438f);
generalPath.curveTo(105.47971f, 265.74603f, 105.57316f, 265.66272f, 105.61482f, 265.70438f);
generalPath.curveTo(105.65649f, 265.74603f, 105.57316f, 265.83948f, 105.61482f, 265.88116f);
generalPath.curveTo(105.65649f, 265.92282f, 105.74993f, 265.83948f, 105.7916f, 265.88116f);
generalPath.curveTo(105.83327f, 265.92282f, 105.74993f, 266.01627f, 105.7916f, 266.05792f);
generalPath.curveTo(105.83327f, 266.09958f, 105.92671f, 266.01627f, 105.96838f, 266.05792f);
generalPath.curveTo(106.01004f, 266.09958f, 105.94974f, 266.1788f, 105.96838f, 266.2347f);
generalPath.curveTo(106.01004f, 266.3597f, 106.10349f, 266.46326f, 106.14515f, 266.58826f);
generalPath.curveTo(106.16379f, 266.64417f, 106.10349f, 266.72336f, 106.14515f, 266.76505f);
generalPath.curveTo(106.18682f, 266.8067f, 106.26923f, 266.73868f, 106.32193f, 266.76505f);
generalPath.curveTo(106.39647f, 266.8023f, 106.43978f, 266.88287f, 106.49871f, 266.9418f);
generalPath.curveTo(106.55763f, 267.00073f, 106.63822f, 267.04404f, 106.67548f, 267.1186f);
generalPath.curveTo(106.72819f, 267.224f, 106.59215f, 267.38882f, 106.67548f, 267.47214f);
generalPath.curveTo(106.71715f, 267.51382f, 106.81059f, 267.43048f, 106.85226f, 267.47214f);
generalPath.curveTo(106.85938f, 267.47925f, 106.85226f, 268.11432f, 106.85226f, 268.17926f);
generalPath.curveTo(106.85226f, 268.25885f, 106.82536f, 268.6558f, 106.85226f, 268.7096f);
generalPath.curveTo(106.88953f, 268.78412f, 106.99177f, 268.81183f, 107.02904f, 268.88635f);
generalPath.curveTo(107.05189f, 268.93207f, 107.02904f, 269.82172f, 107.02904f, 269.94702f);
generalPath.curveTo(107.02904f, 270.00595f, 107.0707f, 270.08212f, 107.02904f, 270.12378f);
generalPath.curveTo(106.98737f, 270.16547f, 106.89393f, 270.08212f, 106.85226f, 270.12378f);
generalPath.curveTo(106.76387f, 270.2122f, 106.94065f, 270.56573f, 106.85226f, 270.6541f);
generalPath.curveTo(106.81059f, 270.6958f, 106.71715f, 270.61246f, 106.67548f, 270.6541f);
generalPath.curveTo(106.30973f, 271.01987f, 107.23441f, 270.63983f, 106.49871f, 271.00766f);
generalPath.curveTo(106.446f, 271.03403f, 106.3636f, 270.966f, 106.32193f, 271.00766f);
generalPath.curveTo(106.20428f, 271.1253f, 106.43958f, 271.2436f, 106.32193f, 271.36124f);
generalPath.curveTo(106.28026f, 271.4029f, 106.18682f, 271.31955f, 106.14515f, 271.36124f);
generalPath.curveTo(106.10349f, 271.4029f, 106.18682f, 271.49634f, 106.14515f, 271.538f);
generalPath.curveTo(106.10349f, 271.57968f, 106.01004f, 271.49634f, 105.96838f, 271.538f);
generalPath.curveTo(105.92671f, 271.57968f, 106.01004f, 271.6731f, 105.96838f, 271.71478f);
generalPath.curveTo(105.92671f, 271.75644f, 105.83327f, 271.6731f, 105.7916f, 271.71478f);
generalPath.curveTo(105.69843f, 271.80795f, 105.68791f, 271.9587f, 105.61482f, 272.06833f);
generalPath.curveTo(105.5686f, 272.13766f, 105.49697f, 272.1862f, 105.43805f, 272.24512f);
generalPath.curveTo(105.37912f, 272.30405f, 105.33581f, 272.3846f, 105.26127f, 272.42188f);
generalPath.curveTo(103.65179f, 273.22662f, 105.48896f, 272.01743f, 104.55416f, 272.9522f);
generalPath.curveTo(104.40393f, 273.10245f, 104.20602f, 273.19647f, 104.02383f, 273.30576f);
generalPath.curveTo(103.91085f, 273.37357f, 103.76345f, 273.38937f, 103.67028f, 273.48254f);
generalPath.curveTo(103.52005f, 273.63278f, 103.46696f, 273.86264f, 103.31673f, 274.01288f);
generalPath.curveTo(103.22356f, 274.10605f, 103.07616f, 274.12186f, 102.96317f, 274.18967f);
generalPath.curveTo(102.78099f, 274.29895f, 102.61503f, 274.4339f, 102.43284f, 274.5432f);
generalPath.curveTo(102.31986f, 274.611f, 102.1847f, 274.64093f, 102.07929f, 274.71997f);
generalPath.curveTo(101.74931f, 274.96747f, 101.52539f, 275.35638f, 101.19541f, 275.60388f);
generalPath.curveTo(101.09f, 275.68292f, 100.94726f, 275.7016f, 100.84185f, 275.78064f);
generalPath.curveTo(100.70852f, 275.88065f, 100.61844f, 276.0301f, 100.4883f, 276.1342f);
generalPath.curveTo(100.3224f, 276.2669f, 100.12119f, 276.35175f, 99.95797f, 276.48776f);
generalPath.curveTo(99.63788f, 276.7545f, 99.39418f, 277.1049f, 99.07409f, 277.37164f);
generalPath.curveTo(98.84775f, 277.56024f, 98.59332f, 277.71335f, 98.36698f, 277.90198f);
generalPath.curveTo(98.11091f, 278.11536f, 97.89558f, 278.37338f, 97.659874f, 278.60907f);
generalPath.curveTo(97.54202f, 278.72693f, 97.41044f, 278.8325f, 97.30632f, 278.96262f);
generalPath.curveTo(97.04088f, 279.29443f, 96.84619f, 279.67752f, 96.59921f, 280.0233f);
generalPath.curveTo(96.42796f, 280.26303f, 96.2575f, 280.50406f, 96.068886f, 280.73038f);
generalPath.curveTo(95.96219f, 280.85843f, 95.80108f, 280.94104f, 95.71533f, 281.08395f);
generalPath.curveTo(95.61946f, 281.24374f, 95.62189f, 281.4476f, 95.53855f, 281.6143f);
generalPath.curveTo(95.44354f, 281.8043f, 95.29431f, 281.96243f, 95.185f, 282.14462f);
generalPath.curveTo(95.11721f, 282.2576f, 95.081314f, 282.38852f, 95.008224f, 282.49817f);
generalPath.curveTo(94.962f, 282.5675f, 94.86871f, 282.6004f, 94.83144f, 282.67493f);
generalPath.curveTo(94.7835f, 282.77084f, 94.879814f, 283.33368f, 94.83144f, 283.38205f);
generalPath.curveTo(94.46569f, 283.7478f, 94.84574f, 282.82312f, 94.4779f, 283.5588f);
generalPath.curveTo(94.45154f, 283.6115f, 94.4779f, 283.67667f, 94.4779f, 283.7356f);
generalPath.curveTo(94.4779f, 283.85345f, 94.4779f, 283.9713f, 94.4779f, 284.08914f);
generalPath.curveTo(94.4779f, 284.3838f, 94.4779f, 284.6784f, 94.4779f, 284.97302f);
generalPath.curveTo(94.4779f, 285.44443f, 94.4779f, 285.91583f, 94.4779f, 286.38724f);
generalPath.curveTo(94.4779f, 286.46686f, 94.451f, 286.86377f, 94.4779f, 286.91757f);
generalPath.curveTo(94.51516f, 286.9921f, 94.6174f, 287.0198f, 94.65467f, 287.09436f);
generalPath.curveTo(94.68102f, 287.14706f, 94.61301f, 287.22946f, 94.65467f, 287.27112f);
generalPath.curveTo(94.696335f, 287.3128f, 94.78978f, 287.22946f, 94.83144f, 287.27112f);
generalPath.curveTo(94.873116f, 287.3128f, 94.78978f, 287.40625f, 94.83144f, 287.4479f);
generalPath.curveTo(94.873116f, 287.48956f, 94.96656f, 287.40625f, 95.008224f, 287.4479f);
generalPath.curveTo(95.09156f, 287.53125f, 94.92489f, 287.71814f, 95.008224f, 287.80145f);
generalPath.curveTo(95.04989f, 287.84314f, 95.14333f, 287.7598f, 95.185f, 287.80145f);
generalPath.curveTo(95.22667f, 287.84314f, 95.14333f, 287.93658f, 95.185f, 287.97824f);
generalPath.curveTo(95.22667f, 288.0199f, 95.32909f, 287.9292f, 95.36178f, 287.97824f);
generalPath.curveTo(95.49985f, 288.18533f, 95.512054f, 288.65884f, 95.71533f, 288.86212f);
generalPath.curveTo(95.756996f, 288.90378f, 95.85044f, 288.82047f, 95.892105f, 288.86212f);
generalPath.curveTo(95.93378f, 288.90378f, 95.85044f, 288.99722f, 95.892105f, 289.0389f);
generalPath.curveTo(95.97544f, 289.12222f, 96.14025f, 288.98618f, 96.24566f, 289.0389f);
generalPath.curveTo(96.3202f, 289.07617f, 96.3479f, 289.1784f, 96.42244f, 289.21567f);
generalPath.curveTo(96.47514f, 289.24203f, 96.54651f, 289.18933f, 96.59921f, 289.21567f);
generalPath.curveTo(96.67375f, 289.25293f, 96.701454f, 289.3552f, 96.77599f, 289.39246f);
generalPath.curveTo(96.8814f, 289.44516f, 97.04621f, 289.3091f, 97.12955f, 289.39246f);
generalPath.curveTo(97.17121f, 289.4341f, 97.087875f, 289.52756f, 97.12955f, 289.56924f);
generalPath.curveTo(97.17121f, 289.6109f, 97.25362f, 289.54288f, 97.30632f, 289.56924f);
generalPath.curveTo(97.38086f, 289.60648f, 97.42417f, 289.68707f, 97.48309f, 289.746f);
generalPath.curveTo(97.659874f, 289.746f, 97.84193f, 289.70312f, 98.01343f, 289.746f);
generalPath.curveTo(98.17512f, 289.78644f, 98.20887f, 290.04684f, 98.36698f, 290.09955f);
generalPath.curveTo(98.554825f, 290.16217f, 98.886246f, 290.03693f, 99.07409f, 290.09955f);
generalPath.curveTo(99.19909f, 290.1412f, 99.30264f, 290.23468f, 99.42764f, 290.27634f);
generalPath.curveTo(99.59604f, 290.33246f, 100.13933f, 290.21893f, 100.31152f, 290.27634f);
generalPath.curveTo(100.56152f, 290.35968f, 100.75869f, 290.58655f, 101.01863f, 290.62988f);
generalPath.curveTo(101.25113f, 290.66864f, 101.49003f, 290.62988f, 101.72574f, 290.62988f);
generalPath.curveTo(102.02036f, 290.62988f, 102.31499f, 290.62988f, 102.60962f, 290.62988f);
generalPath.curveTo(102.72747f, 290.62988f, 102.84761f, 290.60678f, 102.96317f, 290.62988f);
generalPath.curveTo(103.14589f, 290.66644f, 103.3097f, 290.77603f, 103.4935f, 290.80667f);
generalPath.curveTo(103.66788f, 290.83572f, 103.84706f, 290.80667f, 104.02383f, 290.80667f);
generalPath.curveTo(104.25954f, 290.80667f, 104.49524f, 290.80667f, 104.73094f, 290.80667f);
generalPath.curveTo(104.84879f, 290.80667f, 104.97016f, 290.77808f, 105.08449f, 290.80667f);
generalPath.curveTo(106.10783f, 291.0625f, 104.61981f, 290.98343f, 105.96838f, 290.98343f);
generalPath.curveTo(106.16779f, 290.98343f, 107.14546f, 290.95325f, 107.20582f, 290.98343f);
generalPath.curveTo(107.28035f, 291.02072f, 107.30039f, 291.1465f, 107.38259f, 291.16022f);
generalPath.curveTo(107.67321f, 291.20865f, 107.97185f, 291.16022f, 108.26647f, 291.16022f);
generalPath.curveTo(108.67895f, 291.16022f, 109.09143f, 291.16022f, 109.50391f, 291.16022f);
generalPath.curveTo(109.64305f, 291.16022f, 110.3736f, 291.14603f, 110.38779f, 291.16022f);
generalPath.curveTo(110.42946f, 291.20187f, 110.34613f, 291.29532f, 110.38779f, 291.33698f);
generalPath.curveTo(110.42559f, 291.3748f, 110.99744f, 291.3045f, 111.0949f, 291.33698f);
generalPath.curveTo(111.2199f, 291.37866f, 111.31771f, 291.49744f, 111.44845f, 291.51376f);
generalPath.curveTo(111.79928f, 291.55762f, 112.15556f, 291.51376f, 112.50912f, 291.51376f);
generalPath.curveTo(113.03945f, 291.51376f, 113.56978f, 291.51376f, 114.10011f, 291.51376f);
generalPath.curveTo(114.27688f, 291.51376f, 114.46273f, 291.45786f, 114.63044f, 291.51376f);
generalPath.curveTo(114.70949f, 291.54013f, 114.72501f, 291.67685f, 114.80721f, 291.69055f);
generalPath.curveTo(115.09783f, 291.73898f, 115.39647f, 291.69055f, 115.6911f, 291.69055f);
generalPath.curveTo(116.10357f, 291.69055f, 116.51605f, 291.69055f, 116.92853f, 291.69055f);
generalPath.curveTo(117.10531f, 291.69055f, 117.28449f, 291.6615f, 117.45886f, 291.69055f);
generalPath.curveTo(117.64267f, 291.7212f, 117.80399f, 291.84674f, 117.98919f, 291.8673f);
generalPath.curveTo(118.34058f, 291.90637f, 118.6963f, 291.8673f, 119.04985f, 291.8673f);
generalPath.curveTo(119.99266f, 291.8673f, 120.93547f, 291.8673f, 121.87828f, 291.8673f);
generalPath.curveTo(123.88175f, 291.8673f, 125.88522f, 291.8673f, 127.88869f, 291.8673f);
generalPath.curveTo(127.93486f, 291.8673f, 128.86047f, 291.89694f, 128.94936f, 291.8673f);
generalPath.curveTo(129.07436f, 291.82565f, 129.17506f, 291.7225f, 129.3029f, 291.69055f);
generalPath.curveTo(129.45868f, 291.6516f, 130.25899f, 291.74283f, 130.36356f, 291.69055f);
generalPath.curveTo(130.4381f, 291.6533f, 130.471f, 291.56f, 130.54034f, 291.51376f);
generalPath.curveTo(130.64996f, 291.44067f, 130.80072f, 291.43015f, 130.89389f, 291.33698f);
generalPath.curveTo(130.98706f, 291.24384f, 130.99757f, 291.09308f, 131.07066f, 290.98343f);
generalPath.curveTo(131.1169f, 290.9141f, 131.22108f, 290.8857f, 131.24744f, 290.80667f);
generalPath.curveTo(131.28471f, 290.69485f, 131.21017f, 290.5649f, 131.24744f, 290.45312f);
generalPath.curveTo(131.2738f, 290.37405f, 131.38695f, 290.35086f, 131.42422f, 290.27634f);
generalPath.curveTo(131.44746f, 290.22986f, 131.42422f, 289.66168f, 131.42422f, 289.56924f);
generalPath.curveTo(131.42422f, 289.47678f, 131.44746f, 288.9086f, 131.42422f, 288.86212f);
generalPath.curveTo(131.0734f, 288.16046f, 131.36835f, 289.64343f, 131.07066f, 288.155f);
generalPath.curveTo(131.02444f, 287.9239f, 131.07066f, 287.68362f, 131.07066f, 287.4479f);
generalPath.curveTo(131.07066f, 287.38898f, 131.0893f, 287.32703f, 131.07066f, 287.27112f);
generalPath.curveTo(130.87833f, 286.6941f, 130.83974f, 287.12296f, 130.71712f, 286.38724f);
generalPath.curveTo(130.71712f, 286.21048f, 130.71712f, 286.0337f, 130.71712f, 285.85693f);
generalPath.curveTo(130.65819f, 285.798f, 130.5667f, 285.7592f, 130.54034f, 285.68015f);
generalPath.curveTo(130.51018f, 285.58966f, 130.54034f, 284.74585f, 130.54034f, 284.61948f);
generalPath.curveTo(130.54034f, 284.56055f, 130.5667f, 284.49542f, 130.54034f, 284.4427f);
generalPath.curveTo(130.50307f, 284.36816f, 130.40083f, 284.34045f, 130.36356f, 284.26593f);
generalPath.curveTo(130.28023f, 284.09927f, 130.256f, 283.9086f, 130.18678f, 283.7356f);
generalPath.curveTo(130.08891f, 283.4909f, 129.9311f, 283.27316f, 129.83324f, 283.0285f);
generalPath.curveTo(129.76402f, 282.85547f, 129.72566f, 282.67117f, 129.65645f, 282.49817f);
generalPath.curveTo(129.39186f, 281.83667f, 129.54115f, 282.44434f, 129.12611f, 281.6143f);
generalPath.curveTo(128.65472f, 280.67148f, 129.3315f, 281.48038f, 128.5958f, 280.37683f);
generalPath.curveTo(128.50334f, 280.23816f, 128.34224f, 280.15662f, 128.24223f, 280.0233f);
generalPath.curveTo(128.16318f, 279.91788f, 128.15863f, 279.7629f, 128.06546f, 279.66974f);
generalPath.curveTo(127.9723f, 279.57657f, 127.80508f, 279.58612f, 127.71191f, 279.49295f);
generalPath.curveTo(127.61874f, 279.39978f, 127.61419f, 279.2448f, 127.53513f, 279.1394f);
generalPath.curveTo(127.43534f, 279.00635f, 126.78431f, 278.35532f, 126.65125f, 278.25552f);
generalPath.curveTo(126.54584f, 278.17645f, 126.41068f, 278.1465f, 126.2977f, 278.07874f);
generalPath.curveTo(126.11552f, 277.96942f, 125.93733f, 277.85266f, 125.76737f, 277.7252f);
generalPath.curveTo(125.56737f, 277.5752f, 125.43704f, 277.34485f, 125.23704f, 277.19485f);
generalPath.curveTo(125.14801f, 276.8054f, 124.87337f, 277.1014f, 124.70671f, 277.01807f);
generalPath.curveTo(124.63217f, 276.9808f, 124.60447f, 276.87857f, 124.52993f, 276.8413f);
generalPath.curveTo(124.47723f, 276.81494f, 124.40586f, 276.86765f, 124.35315f, 276.8413f);
generalPath.curveTo(124.27862f, 276.80405f, 124.24304f, 276.71454f, 124.17638f, 276.66452f);
generalPath.curveTo(124.00641f, 276.53705f, 123.81601f, 276.43845f, 123.64605f, 276.31097f);
generalPath.curveTo(123.57938f, 276.261f, 123.54073f, 276.17706f, 123.46927f, 276.1342f);
generalPath.curveTo(123.2433f, 275.99863f, 122.9766f, 275.9338f, 122.76216f, 275.78064f);
generalPath.curveTo(122.55873f, 275.6353f, 122.43985f, 275.38898f, 122.23183f, 275.2503f);
generalPath.curveTo(122.07679f, 275.14694f, 121.87452f, 275.14273f, 121.7015f, 275.07355f);
generalPath.curveTo(121.40773f, 274.95602f, 121.05478f, 274.72107f, 120.81762f, 274.5432f);
generalPath.curveTo(120.61762f, 274.39322f, 120.48729f, 274.16287f, 120.28729f, 274.01288f);
generalPath.curveTo(120.18188f, 273.9338f, 120.02691f, 273.92926f, 119.93374f, 273.8361f);
generalPath.curveTo(119.78351f, 273.68588f, 119.70766f, 273.47574f, 119.58018f, 273.30576f);
generalPath.curveTo(119.43018f, 273.10577f, 119.19985f, 272.97543f, 119.04985f, 272.77545f);
generalPath.curveTo(118.9708f, 272.67004f, 118.932f, 272.53973f, 118.87308f, 272.42188f);
generalPath.curveTo(118.81415f, 272.30405f, 118.74523f, 272.19067f, 118.6963f, 272.06833f);
generalPath.curveTo(117.98451f, 270.28885f, 118.83433f, 272.44366f, 118.51952f, 271.18445f);
generalPath.curveTo(118.45561f, 270.9288f, 118.22988f, 270.733f, 118.16597f, 270.47733f);
generalPath.curveTo(118.12591f, 270.31708f, 118.16597f, 269.79883f, 118.16597f, 269.59344f);
generalPath.curveTo(118.16597f, 269.0042f, 118.16597f, 268.41495f, 118.16597f, 267.82568f);
generalPath.curveTo(118.16597f, 267.76678f, 118.16597f, 267.70786f, 118.16597f, 267.64893f);
generalPath.curveTo(118.16597f, 267.59f, 118.1243f, 267.51382f, 118.16597f, 267.47214f);
generalPath.curveTo(118.2493f, 267.38882f, 118.43619f, 267.55548f, 118.51952f, 267.47214f);
generalPath.curveTo(118.51952f, 267.00073f, 118.4606f, 267.53107f, 118.6963f, 267.29535f);
generalPath.curveTo(118.73797f, 267.2537f, 118.65463f, 267.16025f, 118.6963f, 267.1186f);
generalPath.curveTo(118.77963f, 267.03525f, 118.94444f, 267.1713f, 119.04985f, 267.1186f);
generalPath.curveTo(119.20654f, 267.04025f, 119.41926f, 266.69553f, 119.58018f, 266.58826f);
generalPath.curveTo(119.68982f, 266.51517f, 119.8114f, 266.46042f, 119.93374f, 266.41147f);
generalPath.curveTo(120.10675f, 266.3423f, 120.315f, 266.3465f, 120.46407f, 266.2347f);
generalPath.curveTo(120.56948f, 266.15564f, 120.56775f, 265.99078f, 120.64084f, 265.88116f);
generalPath.curveTo(120.6945f, 265.80066f, 121.29082f, 265.2026f, 121.34795f, 265.17404f);
generalPath.curveTo(121.40066f, 265.1477f, 121.48306f, 265.2157f, 121.52473f, 265.17404f);
generalPath.curveTo(121.56639f, 265.1324f, 121.48306f, 265.03894f, 121.52473f, 264.99728f);
generalPath.curveTo(121.64482f, 264.87717f, 121.87629f, 265.178f, 122.05506f, 264.8205f);
generalPath.curveTo(122.08141f, 264.7678f, 122.02871f, 264.6964f, 122.05506f, 264.6437f);
generalPath.curveTo(122.1632f, 264.42743f, 122.41314f, 264.41934f, 122.58539f, 264.29016f);
generalPath.curveTo(122.71872f, 264.19016f, 122.78987f, 264.01114f, 122.93894f, 263.9366f);
generalPath.curveTo(123.04435f, 263.8839f, 123.18069f, 263.97388f, 123.29249f, 263.9366f);
generalPath.curveTo(123.37155f, 263.91025f, 123.39473f, 263.7971f, 123.46927f, 263.75983f);
generalPath.curveTo(123.52197f, 263.7335f, 123.59015f, 263.77847f, 123.64605f, 263.75983f);
generalPath.curveTo(123.89605f, 263.6765f, 124.11745f, 263.52414f, 124.35315f, 263.40628f);
generalPath.curveTo(124.471f, 263.34735f, 124.58886f, 263.28842f, 124.70671f, 263.2295f);
generalPath.curveTo(124.82456f, 263.17056f, 124.95485f, 263.13177f, 125.06026f, 263.05273f);
generalPath.curveTo(125.19359f, 262.95273f, 125.2709f, 262.7849f, 125.41381f, 262.69916f);
generalPath.curveTo(125.5736f, 262.6033f, 125.77748f, 262.60574f, 125.94414f, 262.5224f);
generalPath.curveTo(126.01868f, 262.4851f, 126.05158f, 262.39185f, 126.12092f, 262.3456f);
generalPath.curveTo(126.23055f, 262.27252f, 126.35662f, 262.22778f, 126.47447f, 262.16885f);
generalPath.curveTo(126.59233f, 262.10992f, 126.70303f, 262.03372f, 126.82803f, 261.99207f);
generalPath.curveTo(126.88393f, 261.97342f, 126.96314f, 262.03372f, 127.0048f, 261.99207f);
generalPath.curveTo(127.04647f, 261.9504f, 126.96314f, 261.85696f, 127.0048f, 261.81528f);
generalPath.curveTo(127.08814f, 261.73196f, 127.27503f, 261.89862f, 127.35836f, 261.81528f);
generalPath.curveTo(127.40003f, 261.77362f, 127.33201f, 261.69122f, 127.35836f, 261.63852f);
generalPath.curveTo(127.43289f, 261.48944f, 127.63738f, 261.43402f, 127.71191f, 261.28497f);
generalPath.curveTo(127.76462f, 261.17953f, 127.62858f, 261.01474f, 127.71191f, 260.9314f);
generalPath.curveTo(127.94761f, 260.6957f, 127.88154f, 261.3064f, 128.06546f, 260.75464f);
generalPath.curveTo(128.10274f, 260.64282f, 128.0282f, 260.51288f, 128.06546f, 260.40106f);
generalPath.curveTo(128.09183f, 260.32202f, 128.2159f, 260.30334f, 128.24223f, 260.2243f);
generalPath.curveTo(128.27951f, 260.1125f, 128.24223f, 259.9886f, 128.24223f, 259.87073f);
generalPath.curveTo(128.24223f, 259.81183f, 128.2159f, 259.74667f, 128.24223f, 259.69397f);
generalPath.curveTo(128.27951f, 259.61942f, 128.39267f, 259.59625f, 128.41902f, 259.51718f);
generalPath.curveTo(128.47491f, 259.3495f, 128.41902f, 259.16364f, 128.41902f, 258.98685f);
generalPath.curveTo(128.41902f, 258.69223f, 128.41902f, 258.3976f, 128.41902f, 258.10297f);
generalPath.curveTo(128.41902f, 258.01053f, 128.44226f, 257.44235f, 128.41902f, 257.39587f);
generalPath.curveTo(127.83272f, 256.80957f, 128.50235f, 257.56253f, 128.24223f, 257.04233f);
generalPath.curveTo(128.16771f, 256.89325f, 127.96322f, 256.83783f, 127.88869f, 256.68875f);
generalPath.curveTo(127.86234f, 256.63605f, 127.91504f, 256.5647f, 127.88869f, 256.512f);
generalPath.curveTo(127.85142f, 256.43744f, 127.74918f, 256.40973f, 127.71191f, 256.3352f);
generalPath.curveTo(127.68556f, 256.2825f, 127.75358f, 256.2001f, 127.71191f, 256.15842f);
generalPath.curveTo(127.67024f, 256.11676f, 127.5768f, 256.2001f, 127.53513f, 256.15842f);
generalPath.curveTo(127.4518f, 256.0751f, 127.61847f, 255.88821f, 127.53513f, 255.80489f);
generalPath.curveTo(127.49347f, 255.76321f, 127.41106f, 255.83122f, 127.35836f, 255.80489f);
generalPath.curveTo(127.20929f, 255.73035f, 127.15388f, 255.52586f, 127.0048f, 255.45132f);
generalPath.curveTo(126.83814f, 255.368f, 126.64114f, 255.35788f, 126.47447f, 255.27455f);
generalPath.curveTo(126.39994f, 255.23727f, 126.37223f, 255.13504f, 126.2977f, 255.09776f);
generalPath.curveTo(126.19229f, 255.04507f, 126.04955f, 255.15048f, 125.94414f, 255.09776f);
generalPath.curveTo(125.86961f, 255.0605f, 125.84642f, 254.94736f, 125.76737f, 254.92099f);
generalPath.curveTo(125.65556f, 254.88373f, 125.53167f, 254.92099f, 125.41381f, 254.92099f);
generalPath.curveTo(125.35489f, 254.92099f, 125.28974f, 254.94736f, 125.23704f, 254.92099f);
generalPath.curveTo(125.1625f, 254.88373f, 125.1348f, 254.7815f, 125.06026f, 254.74422f);
generalPath.curveTo(125.00756f, 254.71786f, 124.93939f, 254.76285f, 124.88348f, 254.74422f);
generalPath.curveTo(124.63348f, 254.66087f, 124.42105f, 254.48854f, 124.17638f, 254.39066f);
generalPath.curveTo(124.00337f, 254.32146f, 123.82682f, 254.25908f, 123.64605f, 254.21388f);
generalPath.curveTo(123.58888f, 254.1996f, 123.52197f, 254.24023f, 123.46927f, 254.21388f);
generalPath.curveTo(123.0928f, 254.02565f, 123.49219f, 254.04857f, 123.11572f, 253.86034f);
generalPath.curveTo(122.93894f, 253.8014f, 122.76216f, 253.74248f, 122.58539f, 253.68356f);
generalPath.curveTo(122.52646f, 253.62463f, 122.48315f, 253.54405f, 122.40861f, 253.50677f);
generalPath.curveTo(122.35591f, 253.48042f, 122.28454f, 253.53313f, 122.23183f, 253.50677f);
generalPath.curveTo(122.1573f, 253.46951f, 122.1359f, 253.35022f, 122.05506f, 253.33f);
generalPath.curveTo(121.88356f, 253.28712f, 121.7015f, 253.33f, 121.52473f, 253.33f);
generalPath.curveTo(121.4658f, 253.33f, 121.40066f, 253.35635f, 121.34795f, 253.33f);
generalPath.curveTo(121.27342f, 253.29274f, 121.24571f, 253.19049f, 121.17117f, 253.15323f);
generalPath.curveTo(121.11847f, 253.12688f, 121.0471f, 253.17958f, 120.9944f, 253.15323f);
generalPath.curveTo(120.91986f, 253.11597f, 120.89668f, 253.0028f, 120.81762f, 252.97646f);
generalPath.curveTo(120.70582f, 252.93918f, 120.57587f, 253.01372f, 120.46407f, 252.97646f);
generalPath.curveTo(120.38501f, 252.9501f, 120.37003f, 252.80962f, 120.28729f, 252.79967f);
generalPath.curveTo(120.06785f, 252.77332f, 119.8482f, 252.85062f, 119.62865f, 252.8761f);
generalPath.closePath();
shape = generalPath;
g.setPaint(paint);
g.setStroke(stroke);
g.draw(shape);
g.setTransform(transformsStack.pop());
g.setTransform(transformsStack.pop());
g.setTransform(transformsStack.pop());
g.setTransform(transformsStack.pop());

}



    @SuppressWarnings("unused")
	private void innerPaint(Graphics2D g) {
        float origAlpha = 1.0f;
        Composite origComposite = g.getComposite();
        if (origComposite instanceof AlphaComposite) {
            AlphaComposite origAlphaComposite = 
                (AlphaComposite)origComposite;
            if (origAlphaComposite.getRule() == AlphaComposite.SRC_OVER) {
                origAlpha = origAlphaComposite.getAlpha();
            }
        }
        
	    _paint0(g, origAlpha);


	    shape = null;
	    generalPath = null;
	    paint = null;
	    stroke = null;
	    clip = null;
        transformsStack.clear();
	}

    /**
     * Returns the X of the bounding box of the original SVG image.
     * 
     * @return The X of the bounding box of the original SVG image.
     */
    public static double getOrigX() {
        return 5.298095703125;
    }

    /**
     * Returns the Y of the bounding box of the original SVG image.
     * 
     * @return The Y of the bounding box of the original SVG image.
     */
    public static double getOrigY() {
        return 4.0606689453125;
    }

	/**
	 * Returns the width of the bounding box of the original SVG image.
	 * 
	 * @return The width of the bounding box of the original SVG image.
	 */
	public static double getOrigWidth() {
		return 114.502685546875;
	}

	/**
	 * Returns the height of the bounding box of the original SVG image.
	 * 
	 * @return The height of the bounding box of the original SVG image.
	 */
	public static double getOrigHeight() {
		return 121.33111572265625;
	}

	/** The current width of this resizable icon. */
	private int width;

    /** The current height of this resizable icon. */
	private int height;

	/**
	 * Creates a new transcoded SVG image. This is marked as private to indicate that app
	 * code should be using the {@link #of(int, int)} method to obtain a pre-configured instance.
	 */
	private restoreShapes() {
        this.width = (int) getOrigWidth();
        this.height = (int) getOrigHeight();
	}

    @Override
	public int getIconHeight() {
		return height;
	}

    @Override
	public int getIconWidth() {
		return width;
	}

	@Override
	public synchronized void setDimension(Dimension newDimension) {
		this.width = newDimension.width;
		this.height = newDimension.height;
	}

    @Override
	public synchronized void paintIcon(Component c, Graphics g, int x, int y) {
		Graphics2D g2d = (Graphics2D) g.create();
		g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
				RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
                RenderingHints.VALUE_INTERPOLATION_BICUBIC);
		g2d.translate(x, y);

        double coef1 = (double) this.width / getOrigWidth();
        double coef2 = (double) this.height / getOrigHeight();
        double coef = Math.min(coef1, coef2);
        g2d.clipRect(0, 0, this.width, this.height);
        g2d.scale(coef, coef);
        g2d.translate(-getOrigX(), -getOrigY());
        if (coef1 != coef2) {
            if (coef1 < coef2) {
               int extraDy = (int) ((getOrigWidth() - getOrigHeight()) / 2.0);
               g2d.translate(0, extraDy);
            } else {
               int extraDx = (int) ((getOrigHeight() - getOrigWidth()) / 2.0);
               g2d.translate(extraDx, 0);
            }
        }
        Graphics2D g2ForInner = (Graphics2D) g2d.create();
        innerPaint(g2ForInner);
        g2ForInner.dispose();
        g2d.dispose();
	}
    
    /**
     * Returns a new instance of this icon with specified dimensions.
     *
     * @param width Required width of the icon
     * @param height Required height of the icon
     * @return A new instance of this icon with specified dimensions.
     */
    public static ResizableIcon of(int width, int height) {
       restoreShapes base = new restoreShapes();
       base.width = width;
       base.height = height;
       return base;
    }

    /**
     * Returns a new {@link UIResource} instance of this icon with specified dimensions.
     *
     * @param width Required width of the icon
     * @param height Required height of the icon
     * @return A new {@link UIResource} instance of this icon with specified dimensions.
     */
    public static ResizableIconUIResource uiResourceOf(int width, int height) {
       restoreShapes base = new restoreShapes();
       base.width = width;
       base.height = height;
       return new ResizableIconUIResource(base);
    }

    /**
     * Returns a factory that returns instances of this icon on demand.
     *
     * @return Factory that returns instances of this icon on demand.
     */
    public static Factory factory() {
        return restoreShapes::new;
    }
}

