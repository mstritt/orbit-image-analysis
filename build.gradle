/*
 *     Orbit, a versatile image analysis software for biological image-based quantification.
 *     Copyright (C) 2009 - 2020 Idorsia Pharmaceuticals Ltd., Hegenheimermattweg 91, CH-4123 Allschwil, Switzerland.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.smokejumperit.gradle.license:Gradle-License-Report:0.0.2"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.21.2"
        classpath "org.pushing-pixels:radiance-ignite:3.0.0"
    }
}

//plugins {
//    id "com.github.cr0.macappbundle" version "3.0.1"
//}

// Import ignite for the buildscript (to build the Java classes for the icons from the SVGs).

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'idea'
    id 'application'
}

apply plugin: 'license-report'
apply plugin: 'org.pushing-pixels.ignite'


[ compileJava, compileTestJava ]*.options*.encoding = 'UTF-8'

ext.description = "OrbitImageAnalysis"

application {
    mainClassName = 'com.actelion.research.orbit.imageAnalysis.components.OrbitImageAnalysis'
}

// Configure Java compilation for all the projects
tasks.withType(JavaCompile) {
    def javaVersion = JavaVersion.VERSION_11

    // enforce Java 11 as the source + target + compile time level
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    compileJava.doFirst {
        if (JavaVersion.current() != javaVersion)
            throw new IllegalStateException("Compiler version mismatch; required is "
                    + javaVersion + ", but using " + JavaVersion.current());
    }

    // optionally flag all usage of deprecated APIs as errors
//    options.deprecation = true
//    options.compilerArgs += ['-Werror']

    if (javaVersion.isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    clean {
        delete 'out'     // interpreted relative to the project directory
    }

    disableAutoTargetJvm()
}

ext.orbitVersion = new File(projectDir,"src/main/resources/version.txt").text
ext.orbitVersionStr = orbitVersion.replaceAll("\\.","")
project.version = ext.orbitVersion

// Define the Radiance version in one place, since multiple libraries that need to be updated together.
def radianceVersion = '3.0.0'

repositories {
    mavenCentral()
    maven {
        url 'https://artifacts.openmicroscopy.org/artifactory/maven/'
        content {
            includeGroup "omero"
            includeGroup "ome"
            includeGroup "org.openmicroscopy"
            includeModule "woolz", "JWlz"
            includeModule "cisd", "jhdf5"
        }
    }
    maven {
        url 'https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/'
        content {
            // Dependencies from ome:formats-gpl
            includeModule "edu.ucar", "cdm"
            includeModule "edu.ucar", "httpservices"
            includeModule "edu.ucar", "udunits"
        }
    }
    maven {
        url 'https://maven.scijava.org/content/repositories/snapshots/'
    }
    maven {
        url 'https://repository.jboss.org/nexus/content/repositories/thirdparty-releases/'
        content {
            // for jai-codec
            includeVersion "com.sun.media", "jai-codec", "1.1.3"
            includeVersion "javax.media", "jai-core", "1.1.3"
        }
    }
}


test {
    useJUnit()

    // Needed to load the native libraries:
    // https://java-native-access.github.io/jna/4.2.1/com/sun/jna/NativeLibrary.html
    systemProperty "jna.library.path", "lib/"
    systemProperty 'java.awt.headless', 'true'
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}
task docJar(type: Jar, dependsOn: 'javadoc') {
    from destinationDirectory
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'com.actelion.research'
            artifactId 'orbit-image-analysis'
            version "$orbitVersion"
            from components.java
            artifact sourceJar {
                classifier "sources"
            }
            artifact docJar {
                classifier "javadoc"
            }
            pom.withXml {
                asNode().appendNode('description', 'Orbit, a versatile image analysis software for biological image-based quantification')
            }
        }
    }
}


task copyToLib( type: Copy ) {
    into "$buildDir/libs/lib"
    from configurations.runtimeClasspath
}

jar {
    archiveVersion = orbitVersion
    dependsOn copyToLib
//    zip64=true
    manifest {
        attributes 'Implementation-Title': 'Orbit Image Analysis',
                'Implementation-Version': orbitVersion,
                'Main-Class': 'com.actelion.research.orbit.imageAnalysis.components.OrbitImageAnalysis',
                'Vendor': 'Idorsia'
    }
}

configurations {
    implementation.exclude module:'slf4j-log4j12'
    implementation.exclude group:'com.codahale.metrics', module:'metrics-jvm'
    implementation.exclude group:'com.codahale.metrics', module:'metrics-core'
    implementation.exclude group:'com.codahale.metrics', module:'metrics-graphite'
    implementation.exclude group:'cglib', module:'cglib'
    implementation.exclude group:'quartz', module:'quartz'
}

dependencies {
    implementation 'com.actelion.research:lib-orbit-common:1.2.12'
    implementation ('com.actelion.research:image-provider-omero:1.7.2') {
        because('Version 1.7.1 supports Omero 5.6.x')
//        exclude (group:'com.amazonaws', module: 'aws-java-sdk-core')
//        exclude (group:'com.amazonaws', module: 'aws-java-sdk-s3')
//        exclude (group:'com.amazonaws', module: 'aws-java-sdk-kms')
    }
    api ('com.actelion.research:map-reduce-generic:1.0.10')
//    implementation 'com.actelion.research:map-reduce-exec-spark:1.1.3'

    // JNA (needed for the NDPR C++ API)
    implementation 'net.java.dev.jna:jna:4.5.1'

    // explicit versions, see implementation.excludes
    implementation 'org.quartz-scheduler:quartz:2.1.1'
    implementation 'org.sonatype.sisu.inject:cglib:2.2.1-v20090111'
    implementation 'io.dropwizard.metrics:metrics-core:3.1.2'
    implementation 'io.dropwizard.metrics:metrics-jvm:3.1.2'
    implementation 'io.dropwizard.metrics:metrics-graphite:3.1.2'


    api 'com.thoughtworks.xstream:xstream:1.4.9'
    implementation 'org.jaitools:jt-utils:1.4.0' // jai-tools
    implementation 'com.sun.media:jai-codec:1.1.3'
    api 'javax.media:jai-core:1.1.3'
    implementation 'com.github.jai-imageio:jai-imageio-core:1.3.1'
    implementation 'com.github.jai-imageio:jai-imageio-jpeg2000:1.3.0'

    implementation (group:'org.swinglabs', name:'swingx', version:'1.6.1') {
        exclude (module: 'swing-worker')
    }

    // Radiance UI and dependencies
    implementation "org.pushing-pixels:radiance-substance:$radianceVersion"
    api "org.pushing-pixels:radiance-flamingo:$radianceVersion"
    implementation "org.pushing-pixels:radiance-neon:$radianceVersion"
    implementation "org.pushing-pixels:radiance-photon:$radianceVersion"

    api 'com.google.guava:guava:28.2-jre'
    api 'org.apache.commons:commons-math3:3.6.1'
    api (group: 'com.googlecode.matrix-toolkits-java', name: 'mtj', version:'1.0.4') {
        transitive = false
    }
    // weka start - only java implementations
    api (group: 'nz.ac.waikato.cms.weka', name: 'weka-stable', version:'3.8.0') {
        transitive = false
    }
    implementation 'nz.ac.waikato.cms.weka.thirdparty:bounce:0.18'
    implementation 'com.github.fommil.netlib:core:1.1.2'
    implementation 'com.github.fommil.netlib:generator:1.1.2'
    implementation 'com.github.fommil.netlib:native_system-java:1.1'
    // weka end

    api 'gov.nih.imagej:imagej:1.46'
    implementation 'de.biomedical-imaging.ij:ij_blob:1.4.9'
    implementation (group: 'org.codelibs', name:'jcifs', version:'1.3.18.1') {  // for SmbUtils     (exclude javax.servlet-api because Spark needs a different version)
        exclude (group:'javax.servlet', module: 'servlet-api')
    }
    api (group: 'ome', name:'formats-gpl', version:'6.5.0') {
        exclude (module: 'blitz')
    }
    api (group: 'net.imglib2', name: 'imglib2', version: '3.2.1') // to avoid jpeg2000 problem: NoSuchMethodError: jj2000.j2k.fileformat.reader.FileFormatReader.<init>

    api 'org.codehaus.groovy:groovy-all:2.5.7'
    api 'org.codehaus.gpars:gpars:1.2.1'
    implementation 'com.fifesoft:rsyntaxtextarea:3.0.3'
    implementation 'com.fifesoft:autocomplete:3.0.0'

    implementation 'ch.qos.logback:logback-classic:1.1.7'
    implementation 'net.java.linoleum:jlfgr:1_0'
    implementation (group: 'sc.fiji', name: 'legacy-imglib1', version: '2.0.0-SNAPSHOT') {     //1.1.5  2.0.0-SNAPSHOT for graph_cut
        transitive = false
    }
    implementation 'org.xerial:sqlite-jdbc:3.21.0'
    implementation 'org.tensorflow:tensorflow:1.14.0'  // 1.4.0 1.10.0 implementationOnly
    // implementation 'org.tensorflow:libtensorflow_jni_gpu:1.10.0'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.7'

    testImplementation 'org.hamcrest:hamcrest:2.2'

    testImplementation 'junit:junit:4.13'
}

//if (file('custom.gradle').exists()) {
//    apply from: 'custom.gradle'
//}

/*
 * Compile the icons at build time, for better performance.
 * Note that the example in https://github.com/kirill-grouchnikov/radiance/blob/master/docs/tools/ignite/ignite.md
 * didn't work because the compileJava.doFirst meant that the
 * parameters like inputDirectory were initialized at the wrong time.
 */
task generateIcons {
    ignite {
        inputDirectory = file('src/main/resources/resource/svg')
        outputDirectory = file('src/main/java/com/actelion/research/orbit/imageAnalysis/components/icons')
        outputLanguage = 'java'
        outputPackageName = 'com.actelion.research.orbit.imageAnalysis.components.icons'
        useResizableTemplate = true
        transcode()
    }
}